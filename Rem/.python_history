#plt.ylim(0.110, 0.112)
plt.tight_layout()
plt.show()
zGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="z")
logGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="log")
biGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="binarized")
zGNB.train()
zaccuracy, zerror = zGNB.test()
logGNB.train()
logaccuracy, logerror = logGNB.test()
biGNB.train()
biaccuracy, bierror = biGNB.test()
print zaccuracy, zerror
print logaccuracy, logerror
print biaccuracy, bierror
gnb = GaussianNB()
y_pred = gnb.fit(binarized_all(Xtrain), ytrain).predict(binarized_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
error_train = [0.175856443719, 0.163458401305, 0.137683523654]
naive_bayes_classifier = reload(naive_bayes_classifier)
zGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="z")
logGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="log")
biGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="binarized")
zGNB.train()
zaccuracy, zerror = zGNB.test()
logGNB.train()
logaccuracy, logerror = logGNB.test()
biGNB.train()
biaccuracy, bierror = biGNB.test()
print zaccuracy, zerror
print logaccuracy, logerror
print biaccuracy, bierror
error_test = [0.188802083333, 0.180989583333, 0.157552083333]
rects1 = plt.bar(index, error_train, bar_width,alpha=opacity, color='b',label='train')
rects2 = plt.bar(index + bar_width, error_test, bar_width,alpha=opacity, color='r',label='test')
plt.xlabel('Pre Processing')
plt.ylabel('Error Rate')
plt.xticks(index + bar_width, ('z', 'log', 'binarized'))
plt.legend()
plt.tight_layout()
plt.show()
y_pred = gnb.fit(binarized_all(Xtrain), ytrain).predict(znormalization_all(Xtest))
y_pred = gnb.fit(binarized_all(znormalization_all(Xtrain), ytrain).predict(znormalization_all(Xtest))
y_pred = gnb.fit(znormalization_all(Xtrain), ytrain).predict(znormalization_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
y_pred = gnb.fit(logtransform_all(Xtrain), ytrain).predict(logtransform_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
import urllib
qiejq
x = np.array([[1., 2.], [3., 4.]])
out1 = np.linalg.inv(x)
assert np.allclose(np.dot(x, out1), np.eye(2))
print out1
import numpy as np
x = [1,2]
y = [[4, 1], [2, 2]]
print np.dot(x, y)
print np.dot(y, x)
print np.matmul(x, y)
print np.inner(x, y)
print np.inner(y, x)
x = [[1, 0], [0, 1]]
y = [[4, 1], [2, 2], [1, 1]]
print np.dot(y, x)
print np.matmul(y, x)
x = np.array(['a', 'b'], dtype=object)
y = np.array([1, 2])
print np.inner(x, y)
print np.inner(y, x)
print np.outer(x, y)
print np.outer(y, x)
import system
import sys
import os
import os
os.system('touch 1')
import wave
import pylab as pl
import numpy as np
f = wave.open(r"arctic_a0001.wav", "rb")
params = f.getparams()
nchannels, sampwidth, framerate, nframes = params[:4]
str_data = f.readframes(nframes)
f.close()
wave_data = np.fromstring(str_data, dtype=np.short)
wave_data.shape = -1, 2
wave_data = wave_data.T
time = np.arange(0, nframes) * (1.0 / framerate)
wave_data = np.fromstring(str_data, dtype=np.short)
print wave_data.shape
wave_data = wave_data.T
time = np.arange(0, nframes) * (1.0 / framerate)
wave_data = np.fromstring(str_data, dtype=np.short)
print framerate
time = np.arange(0, nframes) * (1.0 / framerate)
pl.subplot(211) 
pl.plot(time, wave_data)
pl.subplot(212) 
pl.plot(time, wave_data, c="g")
pl.xlabel("time (seconds)")
pl.show()
import wave
import pylab as pl
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
plt.subplot(211) 
plt.plot(time, wave_data)
plt.subplot(212) 
plt.plot(time, wave_data, c="g")
plt.xlabel("time (seconds)")
plt.show()
import wave
import pylab as pl
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
f = wave.open(r"blstm/test/test_synthesis/wav/arctic_a0001.wav", "rb")
params = f.getparams()
nchannels, sampwidth, framerate, nframes = params[:4]
str_data = f.readframes(nframes)
f.close()
wave_data = np.fromstring(str_data, dtype=np.short)
print framerate
time = np.arange(0, nframes) * (1.0 / framerate)
plt.subplot(211) 
plt.plot(time, wave_data)
plt.subplot(212) 
plt.plot(time, wave_data, c="g")
plt.xlabel("time (seconds)")
plt.show()
f = wave.open(r"blstm/test/test_synthesis/wav/arctic_a0001.wav", "rb")
params = f.getparams()
nchannels, sampwidth, framerate, nframes = params[:4]
str_data = f.readframes(nframes)
time = np.arange(0, nframes) * (1.0 / framerate)
wave_blstm = np.fromstring(str_data, dtype=np.short)
f.close()
plt.subplot(211) 
plt.plot(time, wave_data)
plt.subplot(212) 
plt.plot(time, wave_data, c="g")
plt.xlabel("time (seconds)")
plt.show()
time_blstm, wave_blstm = get_wav(wavname = "blstm")
def get_wav(self, wavname) :
    f = wave.open(wavname + "/test/test_synthesis/wav/arctic_a0001.wav", "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave
time_blstm, wave_blstm = get_wav(wavname = "blstm")
def get_wav(wavname) :
    f = wave.open(wavname + "/test/test_synthesis/wav/arctic_a0001.wav", "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave
time_blstm, wave_blstm = get_wav(wavname = "blstm")
def get_wav(wavname) :
    f = wave.open(wavname + "/test/test_synthesis/wav/arctic_a0001.wav", "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm")
time_dnn, wave_dnn = get_wav(wavname = "dnn")
time_lstm, wave_lstm = get_wav(wavname = "lstm")
plt.subplot(311) 
plt.plot(time_blstm, wave_blstm)
plt.subplot(312) 
plt.plot(time_dnn, wave_dnn, c="g")
plt.subplot(313)
plt.plot(time_lstm, wave_lstm, c='r')
plt.xlabel("time (seconds)")
plt.show()
import discriminative_classfier
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
LR.train
LR = discriminative_classfier.LogisticRegression()
LR.train(eps = 1e-4)
LR.train()
LR.train
LR.test
print LR.test
print LR.test()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
reload(discriminative_classfier)
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
reload(discriminative_classfier)
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.train()
print KnnClassifier.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 1)
print KnnClassifier.train()
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 1)
print KnnClassifier.train()
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
lambdas = [1:10:1]
lambdas
lambdas = range(1, 11)
lambdas
lambdas = range(1, 11)
lambdas += 5 * range(3, 21)
lambdas = range(1, 11)
lambdas += 5 * range(3, 21)
lambdas
lambdas = range(1, 11)
lambdas += range(15, 100, 5)
lambdas
lambdas = range(1, 11) + range(15, 101, 5)
lambdas
def Logistic_Tester(lambdas, prep = "z") :
    Logistic_Regression = discriminative_classfier.LogisticRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Logistic_Regression.train()
    test_err = Logistic_Regression.test()
    return train_err, test_err
train_errs = []
test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "z")
    train_errs.append(train_err)
    test_errs.append(test_err)
train_errs
test_errs
import matplotlib.pyplot as plt
%matplotlib inline
plt.plot(lambdas, train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, test_errs, label="test error", color="blue", linewidth=2)
plt.plot(lambdas, train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for logistic regression")
def KNN_Tester(lambdas, prep = "z") :
    KNN = discriminative_classfier.KNNClassifier(K= lambdas, preprocessing= prep)
    train_err = KNN.train()
    test_err = KNN.test()
    return train_err, test_err
KNN_z_train_errs = []
KNN_z_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN(lambdas = lam, prep = "z")
    KNN_z_train_errs.append(train_err)
    KNN_z_test_errs.append(test_err)
KNN_z_train_errs = []
KNN_z_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "z")
    KNN_z_train_errs.append(train_err)
    KNN_z_test_errs.append(test_err)
plt.plot(lambdas, KNN_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for K nearest neighbors")
logistic_z_train_errs = []
logistic_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "z")
    logistic_z_train_errs.append(train_err)
    logistic_z_test_errs.append(test_err)
plt.plot(lambdas, logistic_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for logistic regression with z preprocessing")
plt.plot(lambdas, logistic_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with z preprocessing")
logistic_log_train_errs = []
logistic_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "log")
    logistic_log_train_errs.append(train_err)
    logistic_log_test_errs.append(test_err)
plt.plot(lambdas, logistic_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with log preprocessing")
logistic_bin_train_errs = []
logistic_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "binarized")
    logistic_log_train_errs.append(train_err)
    logistic_log_test_errs.append(test_err)
logistic_bin_train_errs = []
logistic_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "binarized")
    logistic_bin_train_errs.append(train_err)
    logistic_bin_test_errs.append(test_err)
plt.plot(lambdas, logistic_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with binarized preprocessing")
KNN_log_train_errs = []
KNN_log_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "log")
    KNN_log_train_errs.append(train_err)
    KNN_log_test_errs.append(test_err)
plt.plot(lambdas, KNN_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for K nearest neighbors with log preprocessing")
KNN_bin_train_errs = []
KNN_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "bin")
    KNN_bin_train_errs.append(train_err)
    KNN_bin_test_errs.append(test_err)
plt.plot(lambdas, KNN_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for K nearest neighbors with binarized preprocessing")
import discriminative_classfier
import matplotlib.pyplot as plt
%matplotlib inline
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 1)
print KnnClassifier.train()
print KnnClassifier.test()
lambdas = range(1, 11) + range(15, 101, 5)
lambdas
def Logistic_Tester(lambdas, prep = "z") :
    Logistic_Regression = discriminative_classfier.LogisticRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Logistic_Regression.train()
    test_err = Logistic_Regression.test()
    return train_err, test_err
logistic_z_train_errs = []
logistic_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "z")
    logistic_z_train_errs.append(train_err)
    logistic_z_test_errs.append(test_err)
plt.plot(lambdas, logistic_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with z preprocessing")
logistic_log_train_errs = []
logistic_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "log")
    logistic_log_train_errs.append(train_err)
    logistic_log_test_errs.append(test_err)
plt.plot(lambdas, logistic_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with log preprocessing")
logistic_bin_train_errs = []
logistic_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "binarized")
    logistic_bin_train_errs.append(train_err)
    logistic_bin_test_errs.append(test_err)
plt.plot(lambdas, logistic_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with binarized preprocessing")
plt.plot(lambdas, train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for logistic regression")
def Linear_Tester(lambdas, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Linear_Regression.train()
    test_err = Linear_Regression.test()
    return train_err, test_err
linear_z_train_errs = []
linear_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "z")
    linear_z_train_errs.append(train_err)
    linear_z_test_errs.append(test_err)
plt.plot(lambdas, linear_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with z preprocessing")
linear_log_train_errs = []
linear_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "log")
    linear_log_train_errs.append(train_err)
    linear_log_test_errs.append(test_err)
plt.plot(lambdas, linear_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with log preprocessing")
linear_bin_train_errs = []
linear_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "binarized")
    linear_bin_train_errs.append(train_err)
    linear_bin_test_errs.append(test_err)
plt.plot(lambdas, linear_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with binarized preprocessing")
def KNN_Tester(lambdas, prep = "z") :
    KNN = discriminative_classfier.KNNClassifier(K= lambdas, preprocessing= prep)
    train_err = KNN.train()
    test_err = KNN.test()
    return train_err, test_err
KNN_z_train_errs = []
KNN_z_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "z")
    KNN_z_train_errs.append(train_err)
    KNN_z_test_errs.append(test_err)
import discriminative_classfier
import matplotlib.pyplot as plt
%matplotlib inline
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 1)
print KnnClassifier.train()
import discriminative_classfier
import matplotlib.pyplot as plt
%matplotlib inline
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
lambdas = range(1, 11) + range(15, 101, 5)
lambdas
def Logistic_Tester(lambdas, prep = "z") :
    Logistic_Regression = discriminative_classfier.LogisticRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Logistic_Regression.train()
    test_err = Logistic_Regression.test()
    return train_err, test_err
logistic_z_train_errs = []
logistic_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "z")
    logistic_z_train_errs.append(train_err)
    logistic_z_test_errs.append(test_err)
plt.plot(lambdas, logistic_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with z preprocessing")
logistic_log_train_errs = []
logistic_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "log")
    logistic_log_train_errs.append(train_err)
    logistic_log_test_errs.append(test_err)
plt.plot(lambdas, logistic_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with log preprocessing")
logistic_bin_train_errs = []
logistic_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "binarized")
    logistic_bin_train_errs.append(train_err)
    logistic_bin_test_errs.append(test_err)
plt.plot(lambdas, logistic_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with binarized preprocessing")
def Linear_Tester(lambdas, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Linear_Regression.train()
    test_err = Linear_Regression.test()
    return train_err, test_err
linear_z_train_errs = []
linear_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "z")
    linear_z_train_errs.append(train_err)
    linear_z_test_errs.append(test_err)
plt.plot(lambdas, linear_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with z preprocessing")
linear_log_train_errs = []
linear_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "log")
    linear_log_train_errs.append(train_err)
    linear_log_test_errs.append(test_err)
plt.plot(lambdas, linear_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with log preprocessing")
linear_bin_train_errs = []
linear_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "binarized")
    linear_bin_train_errs.append(train_err)
    linear_bin_test_errs.append(test_err)
plt.plot(lambdas, linear_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with binarized preprocessing")
def KNN_Tester(lambdas, prep = "z") :
    KNN = discriminative_classfier.KNNClassifier(K= lambdas, preprocessing= prep)
    train_err = KNN.train()
    test_err = KNN.test()
    return train_err, test_err
KNN_z_train_errs = []
KNN_z_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "z")
    KNN_z_train_errs.append(train_err)
    KNN_z_test_errs.append(test_err)
plt.plot(lambdas, KNN_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for K nearest neighbors")
KNN_log_train_errs = []
KNN_log_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "log")
    KNN_log_train_errs.append(train_err)
    KNN_log_test_errs.append(test_err)
plt.plot(lambdas, KNN_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for K nearest neighbors with log preprocessing")
KNN_bin_train_errs = []
KNN_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "bin")
    KNN_bin_train_errs.append(train_err)
    KNN_bin_test_errs.append(test_err)
plt.plot(lambdas, KNN_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for K nearest neighbors with binarized preprocessing")
KNN_z_train_errs
KNN_z_train_errs[0]
KNN_z_train_errs[0]
KNN_log_train_errs[0]
KNN_bin_train_errs[0]
print KNN_z_train_errs[0]
print KNN_log_train_errs[0]
print KNN_bin_train_errs[0]
import discriminative_classfier
import dataloader
import matplotlib.pyplot as plt
%matplotlib inline
X_test, y_test, X_train, y_train = dataloader.load_data(preprocess= 'z')
X_test, y_test, X_train, y_train, feature_size = dataloader.load_data(preprocess= 'z')
for i in range(X_test) :
    for j in range(0, i) :
        if (X_test[i] == X_test[j])
            print X_test[i], X_test[j]
for i in range(X_test) :
    for j in range(0, i) :
        if (X_test[i] == X_test[j]):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (X_test[i] == X_test[j]):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j])):
            print X_test[i], X_test[j]
import discriminative_classfier
import dataloader
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j])):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i, :], X_test[j, :])):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i,], X_test[j,])):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j].all())):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j]).all()):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j]).all() and y_test[i] != y_test[j]):
            print i, y_test[i]
            print X_test[i]
            print j, y_test[j]
            print X_test[j]
X_test, y_test, X_train, y_train, feature_size = dataloader.load_data()
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j]).all() and y_test[i] != y_test[j]):
            print i, y_test[i]
            print X_test[i]
            print j, y_test[j]
            print X_test[j]
print logistic_z_test_errs[0]
print logistic_z_test_errs[9]
print logistic_z_test_errs[-1]
print logistic_z_train_errs[0]
print logistic_z_train_errs[9]
print logistic_z_train_errs[-1]
print linear_z_test_errs[0]
print linear_z_test_errs[9]
print linear_z_test_errs[-1]
print linear_z_train_errs[0]
print linear_z_train_errs[9]
print linear_z_train_errs[-1]
print KNN_z_train_errs[0]
print KNN_z_train_errs[9]
print KNN_z_train_errs[-1]
print KNN_z_test_errs[0]
print KNN_z_test_errs[9]
print KNN_z_test_errs[-1]
def Linear_SGD_Tester(lambdas, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Linear_Regression.sgd_train()
    test_err = Linear_Regression.test()
    return train_err, test_err
def Linear_SGD_Tester(prep = "z", eta=1e-4) :
    Linear_Regression = discriminative_classfier.LinearRegression(eta=eta, preprocessing=prep)
    train_err = Linear_Regression.sgd_train()
    test_err = Linear_Regression.test()
    return train_err, test_err
etas = range(1, 11) * 1.
etas = float(range(1, 11))
etas = [i * 0.1 for i in range(1, 11)]
etas
etas = [10.0 ** (-i) for i in range(1, 11)]
etas
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
print Linear_Regression.next_batch()
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
print Linear_Regression.next_batch()[0]
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
print Linear_Regression.next_batch()[0]
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
print Linear_Regression.next_batch()
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
print x
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for y in x :
    print y
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
print next(x)
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
plt.plot(etas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(etas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_Tester(lambdas = 10, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
def Linear_SGD_Tester(prep = "z", eta=1e-4) :
    Linear_Regression = discriminative_classfier.LinearRegression(eta=eta, preprocessing=prep, max_epoch=500)
    train_err = Linear_Regression.sgd_train()
    test_err = Linear_Regression.test()
    return train_err, test_err
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
etas = [10.0 ** (-i * 0.5) for i in range(1, 11)]
etas
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
etas = [10.0 ** (-i * 0.67) for i in range(1, 11)]
etas
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
etas = [10.0 ** (-i * 0.67) for i in range(1, 11)]
etas
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
print next(x)
print next(x)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for i in range(10):
    print next(x)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
from sklearn import linear_model
clf = linear_model.SGDClassifier()
X_test, y_test, X_train, y_train, feature_size = dataloader.load_data(preprocess='z')
clf.fit(X_test, y_test)
clf.fit(X_train, y_train)
clf.score(X_test, y_test)
clf = linear_model.SGDRegressor()
clf.fit(X_train, y_train)
clf.score(X_test, y_test)
predictions = clf.predict(X_test)
err = 1 - sum((predictions == y_test)) * 1. / len(y_test)
print err
predictions = clf.predict(X_test)
print predictions
clf = linear_model.SGDClassifier()
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
print predictions
err = 1 - sum((predictions == y_test)) * 1. / len(y_test)
print err
true_pos = predictions == y_test and predictions > 0
print true_pos
true_pos = (predictions == y_test)# and predictions > 0
print true_pos
true_pos = (predictions == y_test)# and predictions > 0
print true_pos.sum()
true_pos = 0
for i in range(len(y_test)) :
    if (predictions[i] == y_test[i] and predictions[i] > 0)
        true_pos += 1
print true_pos
true_pos = 0
for i in range(len(y_test)) :
    if (predictions[i] == y_test[i] and predictions[i] > 0):
        true_pos += 1
print true_pos
precision = true_pos / sum(predictions)
precision = 1. * true_pos / sum(predictions)
print precision
recall = 1. * true_pos / sum(y_test)
print recall
reload(discriminative_classfier)
def Linear_SGD_Tester(prep = "z", eta=1e-4) :
    Linear_Regression = discriminative_classfier.LinearRegression(eta=eta, preprocessing=prep, max_epoch=500)
    Linear_Regression.train()
    return Linear_Regression.test()
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall curve")
reload(discriminative_classfier)
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall curve")
import discriminative_classfier
import dataloader
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
true_pos = [1 if x > 0 else -1 for x in predictions] == y_test
print true_pos
true_pos = sum([1 if x > 0 else -1 for x in predictions] == y_test)
print true_pos
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print sgd_train_errs
print sgd_test_errs
import discriminative_classfier
import dataloader
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
true_pos = sum([1 if x > 0 else -1 for x in predictions] == y_test)
print true_pos
etas = [10.0 ** (-i * 0.67) for i in range(1, 11)]
etas
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print sgd_train_errs
print sgd_test_errs
def Linear_Tester(lambdas, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    return Linear_Regression.test()
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
def Linear_Tester(eta, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(eta = eta, preprocessing=prep)
    return Linear_Regression.test()
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
prin recalls
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = 1e-4, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
def Linear_Tester(eta, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(eta = eta, preprocessing=prep)
    Linear_Regression.train()
    return Linear_Regression.test()
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
reload(discriminative_classfier)
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
etas = [10.0 ** (-i * 0.5) for i in range(1, 11)]
etas
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
etas = [10.0 ** (-i * 0.5) for i in range(1, 10)]
etas
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
etas = [10.0 ** (-i) for i in range(1, 10)]
etas
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
clf.fit(X_train, y_train, lerning_rate = 'constant', eta0 = 1e-4)
clf.fit(X_train, y_train, learning_rate = 'constant', eta0 = 1e-4)
clf = linear_model.SGDClassifier(learning_rate = 'constant', eta0 = 1e-4)
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
print predictions
err = 1 - sum((predictions == y_test)) * 1. / len(y_test)
print err
true_pos = sum([1 if x > 0 else -1 for x in predictions] == y_test)
print true_pos
X_test, y_test, X_train, y_train, feature_size = dataloader.load_data(preprocess='z')
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
print predictions
err = 1 - sum((predictions == y_test)) * 1. / len(y_test)
print err
true_pos = sum([1 if x > 0 else -1 for x in predictions] == y_test)
print true_pos
precision = 1. * true_pos / sum(predictions)
print precision
import wave
import pylab as pl
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
def get_wav(wavname) :
    f = wave.open(wavname + "/test/test_synthesis/wav/arctic_a0001.wav", "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
def get_wav(wavname, id) :
    filename = wavename + "/test/test_synthesis/wav/arctic_" + "%03d" %id + ".wav"
    f = wave.open(filename, "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm", id=1)
def get_wav(wavname, id) :
    filename = wavname + "/test/test_synthesis/wav/arctic_" + "%03d" %id + ".wav"
    f = wave.open(filename, "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm", id=1)
def get_wav(wavname, id) :
    filename = wavname + "/test/test_synthesis/wav/arctic_" + "%04d" %id + ".wav"
    f = wave.open(filename, "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm", id=1)
def get_wav(wavname, id) :
    filename = wavname + "/test/test_synthesis/wav/arctic_a" + "%04d" %id + ".wav"
    f = wave.open(filename, "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm", id=1)
from utils.work import predict_work
predict_work
predict_work()
data = sio.loadmat("./spamData.mat")
feature_size = len(data["Xtrain"][1])
def binarized(d):
    d = [1 if e > 0 else 0 for e in d]
    return np.array(d, dtype=int)
def logtransform(d):
    d = [np.log(e + 0.1) for e in d]
    return d
def znormalization(d):
    mean = np.mean(d)
    std = np.std(d)
    d = [(e - mean) / std for e in d]
    return d
def flat(d):
    return np.array(d, dtype=int).flatten()
Xtrain = data['Xtrain']
ytrain = flat(data['ytrain'])
Xtest = data['Xtest']
ytest = flat(data['ytest'])
print "Loaded " + str(len(ytrain)) + " train samples, " + \
              "and " + str(len(ytest)) + " test samples, " + \
              "feature of X is of length " + str(feature_size) + "."
def binarized_all(mat):
    mat = [binarized(d) for d in mat]
    return mat
print Xtrain[0]
def logtransform_all(mat):
    mat = [logtransform(d) for d in mat]
    return mat
def znormalization_all(mat):
    mat = [znormalization(d) for d in mat]
    return mat
print logtransform_all(Xtrain)
print znormalization_all(Xtrain)
print ytest
positive = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 1]
print len(positive)
negative = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 0]
print len(negative)
xtrain = Xtrain#logtransform_all(Xtrain)
xtest = Xtest#logtransform_all(Xtest)
mu_pos_total = []
var_pos_total = []
mu_neg_total = []
var_neg_total = []
for i in range(feature_size) :
    # y = 1
    positive = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 1]
    mu_pos = np.mean(positive)
    var_pos = np.var(positive) + 0.0001
    # y = 0
    negative = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 0]
    mu_neg = np.mean(negative)
    var_neg = np.var(negative) + 0.0001
    mu_pos_total.append(mu_pos)
    var_pos_total.append(var_pos) 
    mu_neg_total.append(mu_neg) 
    var_neg_total.append(var_neg)
def calculate_likelihood(x, mu, var) :
    return np.exp(-np.square(x - mu) / (2 * var)) / np.sqrt(2 * np.pi * var)
pi_1 = 1. * sum(ytrain) / len(ytrain)
print pi_1
predicts = []
for feature in xtest :
    #positive probabiity
    pos_prob = pi_1 #prior
    for i in range(feature_size) :
        pos_prob *= calculate_likelihood(x = feature[i], mu = mu_pos_total[i], var = var_pos_total[i])
    #negative probabiity
    neg_prob = 1 - pi_1 #prior
    for i in range(feature_size) :
        neg_prob *= calculate_likelihood(x = feature[i], mu = mu_neg_total[i], var = var_neg_total[i])
    predict = 1 if pos_prob > neg_prob else 0
    predicts.append(predict)
print predicts
result = predicts == ytest
print sum(result)
print "Accuracy =", sum(result) * 1. / len(predicts)
import sklearn
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
y_pred = gnb.fit(binarized_all(Xtrain), ytrain).predict(binarized_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
zGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="z")
logGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="log")
biGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="binarized")
zGNB.train()
zaccuracy, zerror = zGNB.test()
logGNB.train()
logaccuracy, logerror = logGNB.test()
biGNB.train()
biaccuracy, bierror = biGNB.test()
print zaccuracy, zerror
print logaccuracy, logerror
print biaccuracy, bierror
biBNB_1 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=1, preprocessing="binarized")
biBNB_1.train()
biBNB_1.test()
%matplotlib inline
import scipy.io as sio
import scipy
import numpy as np
import matplotlib.pyplot as plt
import naive_bayes_classifier
data = sio.loadmat("./spamData.mat")
feature_size = len(data["Xtrain"][1])
def binarized(d):
    d = [1 if e > 0 else 0 for e in d]
    return np.array(d, dtype=int)
def logtransform(d):
    d = [np.log(e + 0.1) for e in d]
    return d
def znormalization(d):
    mean = np.mean(d)
    std = np.std(d)
    d = [(e - mean) / std for e in d]
    return d
def flat(d):
    return np.array(d, dtype=int).flatten()
Xtrain = data['Xtrain']
ytrain = flat(data['ytrain'])
Xtest = data['Xtest']
ytest = flat(data['ytest'])
print "Loaded " + str(len(ytrain)) + " train samples, " + \
              "and " + str(len(ytest)) + " test samples, " + \
              "feature of X is of length " + str(feature_size) + "."
def binarized_all(mat):
    mat = [binarized(d) for d in mat]
    return mat
print Xtrain[0]
def logtransform_all(mat):
    mat = [logtransform(d) for d in mat]
    return mat
def znormalization_all(mat):
    mat = [znormalization(d) for d in mat]
    return mat
print logtransform_all(Xtrain)
print znormalization_all(Xtrain)
print ytest
positive = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 1]
print len(positive)
negative = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 0]
print len(negative)
xtrain = Xtrain#logtransform_all(Xtrain)
xtest = Xtest#logtransform_all(Xtest)
mu_pos_total = []
var_pos_total = []
mu_neg_total = []
var_neg_total = []
for i in range(feature_size) :
    # y = 1
    positive = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 1]
    mu_pos = np.mean(positive)
    var_pos = np.var(positive) + 0.0001
    # y = 0
    negative = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 0]
    mu_neg = np.mean(negative)
    var_neg = np.var(negative) + 0.0001
    mu_pos_total.append(mu_pos)
    var_pos_total.append(var_pos) 
    mu_neg_total.append(mu_neg) 
    var_neg_total.append(var_neg)
def calculate_likelihood(x, mu, var) :
    return np.exp(-np.square(x - mu) / (2 * var)) / np.sqrt(2 * np.pi * var)
pi_1 = 1. * sum(ytrain) / len(ytrain)
print pi_1
predicts = []
for feature in xtest :
    #positive probabiity
    pos_prob = pi_1 #prior
    for i in range(feature_size) :
        pos_prob *= calculate_likelihood(x = feature[i], mu = mu_pos_total[i], var = var_pos_total[i])
    #negative probabiity
    neg_prob = 1 - pi_1 #prior
    for i in range(feature_size) :
        neg_prob *= calculate_likelihood(x = feature[i], mu = mu_neg_total[i], var = var_neg_total[i])
    predict = 1 if pos_prob > neg_prob else 0
    predicts.append(predict)
print predicts
result = predicts == ytest
print sum(result)
print "Accuracy =", sum(result) * 1. / len(predicts)
import sklearn
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
y_pred = gnb.fit(binarized_all(Xtrain), ytrain).predict(binarized_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
zGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="z")
logGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="log")
biGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="binarized")
zGNB.train()
zaccuracy, zerror = zGNB.test()
logGNB.train()
logaccuracy, logerror = logGNB.test()
biGNB.train()
biaccuracy, bierror = biGNB.test()
print zaccuracy, zerror
print logaccuracy, logerror
print biaccuracy, bierror
biBNB_1 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=1, preprocessing="binarized")
biBNB_1.train()
biBNB_1.test()
biBNB_10 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=10, preprocessing="binarized")
biBNB_10.train()
biBNB_10.test()
biBNB_100 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=100, preprocessing="binarized")
biBNB_100.train()
biBNB_100.test()
from sklearn.naive_bayes import BernoulliNB
xtrain = binarized_all(Xtrain)
xtest = binarized_all(Xtest)
clf = BernoulliNB()
y_pred = clf.fit(xtrain, ytrain).predict(xtest)
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
print sum(ytest) * 1. / len(ytest)
from scipy.stats import beta
print beta.pdf(x = 0.5, a = 2, b = 2)
x = [1, 2, 3]
error_test = [0.110026041667,0.110677083333,0.110677083333]
error_train = [0.112561174551, 0.112561174551, 0.111908646003]
n_groups = 3
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.35
opacity = 0.4
rects1 = plt.bar(index, error_train, bar_width,alpha=opacity, color='b',label='train')
rects2 = plt.bar(index + bar_width, error_test, bar_width,alpha=opacity, color='r',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.xticks(index + bar_width, ('1', '10', '100'))
plt.legend()
plt.tight_layout()
plt.show()
plt.plot(x, error_train, color='b',label='train')
plt.plot(x, error_test, color='r',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.xticks(x, ('1', '10', '100'))
plt.legend()
plt.tight_layout()
plt.show()
error_train = []
error_test = []
for i in range(101) :
    biBNB = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=i * 50, preprocessing="binarized")
    biBNB.train()
    accuracy, error = biBNB.test()
    error_test.append(error)
x = [i * 50 for i in range(101)]
print len(x)
print len(error_test)
print error_test
plt.plot(x, error_test, color='b',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.legend()
#plt.ylim(0.110, 0.112)
plt.tight_layout()
plt.show()
naive_bayes_classifier = reload(naive_bayes_classifier)
for i in range(101) :
    biBNB = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=i * 50, preprocessing="binarized")
    biBNB.train()
    accuracy, error = biBNB.test()
    error_train.append(error)
plt.plot(x, error_test, color='b',label='test')
plt.plot(x, error_train, color='r',label='train')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.legend()
#plt.ylim(0.110, 0.112)
plt.tight_layout()
plt.show()
%matplotlib inline
import scipy.io as sio
import scipy
import numpy as np
import matplotlib.pyplot as plt
import naive_bayes_classifier
data = sio.loadmat("./spamData.mat")
feature_size = len(data["Xtrain"][1])
def binarized(d):
    d = [1 if e > 0 else 0 for e in d]
    return np.array(d, dtype=int)
def logtransform(d):
    d = [np.log(e + 0.1) for e in d]
    return d
def znormalization(d):
    mean = np.mean(d)
    std = np.std(d)
    d = [(e - mean) / std for e in d]
    return d
def flat(d):
    return np.array(d, dtype=int).flatten()
Xtrain = data['Xtrain']
ytrain = flat(data['ytrain'])
Xtest = data['Xtest']
ytest = flat(data['ytest'])
print "Loaded " + str(len(ytrain)) + " train samples, " + \
              "and " + str(len(ytest)) + " test samples, " + \
              "feature of X is of length " + str(feature_size) + "."
def binarized_all(mat):
    mat = [binarized(d) for d in mat]
    return mat
print Xtrain[0]
def logtransform_all(mat):
    mat = [logtransform(d) for d in mat]
    return mat
def znormalization_all(mat):
    mat = [znormalization(d) for d in mat]
    return mat
print logtransform_all(Xtrain)
print znormalization_all(Xtrain)
print ytest
positive = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 1]
print len(positive)
negative = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 0]
print len(negative)
xtrain = Xtrain#logtransform_all(Xtrain)
xtest = Xtest#logtransform_all(Xtest)
mu_pos_total = []
var_pos_total = []
mu_neg_total = []
var_neg_total = []
for i in range(feature_size) :
    # y = 1
    positive = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 1]
    mu_pos = np.mean(positive)
    var_pos = np.var(positive) + 0.0001
    # y = 0
    negative = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 0]
    mu_neg = np.mean(negative)
    var_neg = np.var(negative) + 0.0001
    mu_pos_total.append(mu_pos)
    var_pos_total.append(var_pos) 
    mu_neg_total.append(mu_neg) 
    var_neg_total.append(var_neg)
def calculate_likelihood(x, mu, var) :
    return np.exp(-np.square(x - mu) / (2 * var)) / np.sqrt(2 * np.pi * var)
pi_1 = 1. * sum(ytrain) / len(ytrain)
print pi_1
predicts = []
for feature in xtest :
    #positive probabiity
    pos_prob = pi_1 #prior
    for i in range(feature_size) :
        pos_prob *= calculate_likelihood(x = feature[i], mu = mu_pos_total[i], var = var_pos_total[i])
    #negative probabiity
    neg_prob = 1 - pi_1 #prior
    for i in range(feature_size) :
        neg_prob *= calculate_likelihood(x = feature[i], mu = mu_neg_total[i], var = var_neg_total[i])
    predict = 1 if pos_prob > neg_prob else 0
    predicts.append(predict)
print predicts
result = predicts == ytest
print sum(result)
print "Accuracy =", sum(result) * 1. / len(predicts)
import sklearn
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
y_pred = gnb.fit(binarized_all(Xtrain), ytrain).predict(binarized_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
zGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="z")
logGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="log")
biGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="binarized")
zGNB.train()
zaccuracy, zerror = zGNB.test()
logGNB.train()
logaccuracy, logerror = logGNB.test()
biGNB.train()
biaccuracy, bierror = biGNB.test()
print zaccuracy, zerror
print logaccuracy, logerror
print biaccuracy, bierror
biBNB_1 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=1, preprocessing="binarized")
biBNB_1.train()
biBNB_1.test()
biBNB_10 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=10, preprocessing="binarized")
biBNB_10.train()
biBNB_10.test()
biBNB_100 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=100, preprocessing="binarized")
biBNB_100.train()
biBNB_100.test()
from sklearn.naive_bayes import BernoulliNB
xtrain = binarized_all(Xtrain)
xtest = binarized_all(Xtest)
clf = BernoulliNB()
y_pred = clf.fit(xtrain, ytrain).predict(xtest)
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
print sum(ytest) * 1. / len(ytest)
from scipy.stats import beta
print beta.pdf(x = 0.5, a = 2, b = 2)
x = [1, 2, 3]
error_test = [0.110026041667,0.110677083333,0.110677083333]
error_train = [0.112561174551, 0.112561174551, 0.111908646003]
n_groups = 3
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.35
opacity = 0.4
rects1 = plt.bar(index, error_train, bar_width,alpha=opacity, color='b',label='train')
rects2 = plt.bar(index + bar_width, error_test, bar_width,alpha=opacity, color='r',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.xticks(index + bar_width, ('1', '10', '100'))
plt.legend()
plt.tight_layout()
plt.show()
plt.plot(x, error_train, color='b',label='train')
plt.plot(x, error_test, color='r',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.xticks(x, ('1', '10', '100'))
plt.legend()
plt.tight_layout()
plt.show()
error_train = []
error_test = []
for i in range(101) :
    biBNB = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=i, preprocessing="binarized")
    biBNB.train()
    accuracy, error = biBNB.test()
    error_test.append(error)
x = [i for i in range(101)]
print len(x)
print len(error_test)
print error_test
plt.plot(x, error_test, color='b',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.legend()
#plt.ylim(0.110, 0.112)
plt.tight_layout()
plt.show()
naive_bayes_classifier = reload(naive_bayes_classifier)
for i in range(101) :
    biBNB = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=i, preprocessing="binarized")
    biBNB.train()
    accuracy, error = biBNB.test()
    error_train.append(error)
naive_bayes_classifier = reload(naive_bayes_classifier)
error_train = []
for i in range(101) :
    biBNB = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=i, preprocessing="binarized")
    biBNB.train()
    accuracy, error = biBNB.test()
    error_train.append(error)
plt.plot(x, error_test, color='b',label='test')
plt.plot(x, error_train, color='r',label='train')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.legend()
#plt.ylim(0.110, 0.112)
plt.tight_layout()
plt.show()
zGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="z")
logGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="log")
biGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="binarized")
zGNB.train()
zaccuracy, zerror = zGNB.test()
logGNB.train()
logaccuracy, logerror = logGNB.test()
biGNB.train()
biaccuracy, bierror = biGNB.test()
print zaccuracy, zerror
print logaccuracy, logerror
print biaccuracy, bierror
gnb = GaussianNB()
y_pred = gnb.fit(binarized_all(Xtrain), ytrain).predict(binarized_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
error_train = [0.175856443719, 0.163458401305, 0.137683523654]
naive_bayes_classifier = reload(naive_bayes_classifier)
zGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="z")
logGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="log")
biGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="binarized")
zGNB.train()
zaccuracy, zerror = zGNB.test()
logGNB.train()
logaccuracy, logerror = logGNB.test()
biGNB.train()
biaccuracy, bierror = biGNB.test()
print zaccuracy, zerror
print logaccuracy, logerror
print biaccuracy, bierror
error_test = [0.188802083333, 0.180989583333, 0.157552083333]
rects1 = plt.bar(index, error_train, bar_width,alpha=opacity, color='b',label='train')
rects2 = plt.bar(index + bar_width, error_test, bar_width,alpha=opacity, color='r',label='test')
plt.xlabel('Pre Processing')
plt.ylabel('Error Rate')
plt.xticks(index + bar_width, ('z', 'log', 'binarized'))
plt.legend()
plt.tight_layout()
plt.show()
y_pred = gnb.fit(binarized_all(Xtrain), ytrain).predict(znormalization_all(Xtest))
y_pred = gnb.fit(binarized_all(znormalization_all(Xtrain), ytrain).predict(znormalization_all(Xtest))
y_pred = gnb.fit(znormalization_all(Xtrain), ytrain).predict(znormalization_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
y_pred = gnb.fit(logtransform_all(Xtrain), ytrain).predict(logtransform_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
import urllib
qiejq
x = np.array([[1., 2.], [3., 4.]])
out1 = np.linalg.inv(x)
assert np.allclose(np.dot(x, out1), np.eye(2))
print out1
import numpy as np
x = [1,2]
y = [[4, 1], [2, 2]]
print np.dot(x, y)
print np.dot(y, x)
print np.matmul(x, y)
print np.inner(x, y)
print np.inner(y, x)
x = [[1, 0], [0, 1]]
y = [[4, 1], [2, 2], [1, 1]]
print np.dot(y, x)
print np.matmul(y, x)
x = np.array(['a', 'b'], dtype=object)
y = np.array([1, 2])
print np.inner(x, y)
print np.inner(y, x)
print np.outer(x, y)
print np.outer(y, x)
import system
import sys
import os
import os
os.system('touch 1')
import wave
import pylab as pl
import numpy as np
f = wave.open(r"arctic_a0001.wav", "rb")
params = f.getparams()
nchannels, sampwidth, framerate, nframes = params[:4]
str_data = f.readframes(nframes)
f.close()
wave_data = np.fromstring(str_data, dtype=np.short)
wave_data.shape = -1, 2
wave_data = wave_data.T
time = np.arange(0, nframes) * (1.0 / framerate)
wave_data = np.fromstring(str_data, dtype=np.short)
print wave_data.shape
wave_data = wave_data.T
time = np.arange(0, nframes) * (1.0 / framerate)
wave_data = np.fromstring(str_data, dtype=np.short)
print framerate
time = np.arange(0, nframes) * (1.0 / framerate)
pl.subplot(211) 
pl.plot(time, wave_data)
pl.subplot(212) 
pl.plot(time, wave_data, c="g")
pl.xlabel("time (seconds)")
pl.show()
import wave
import pylab as pl
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
plt.subplot(211) 
plt.plot(time, wave_data)
plt.subplot(212) 
plt.plot(time, wave_data, c="g")
plt.xlabel("time (seconds)")
plt.show()
import wave
import pylab as pl
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
f = wave.open(r"blstm/test/test_synthesis/wav/arctic_a0001.wav", "rb")
params = f.getparams()
nchannels, sampwidth, framerate, nframes = params[:4]
str_data = f.readframes(nframes)
f.close()
wave_data = np.fromstring(str_data, dtype=np.short)
print framerate
time = np.arange(0, nframes) * (1.0 / framerate)
plt.subplot(211) 
plt.plot(time, wave_data)
plt.subplot(212) 
plt.plot(time, wave_data, c="g")
plt.xlabel("time (seconds)")
plt.show()
f = wave.open(r"blstm/test/test_synthesis/wav/arctic_a0001.wav", "rb")
params = f.getparams()
nchannels, sampwidth, framerate, nframes = params[:4]
str_data = f.readframes(nframes)
time = np.arange(0, nframes) * (1.0 / framerate)
wave_blstm = np.fromstring(str_data, dtype=np.short)
f.close()
plt.subplot(211) 
plt.plot(time, wave_data)
plt.subplot(212) 
plt.plot(time, wave_data, c="g")
plt.xlabel("time (seconds)")
plt.show()
time_blstm, wave_blstm = get_wav(wavname = "blstm")
def get_wav(self, wavname) :
    f = wave.open(wavname + "/test/test_synthesis/wav/arctic_a0001.wav", "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave
time_blstm, wave_blstm = get_wav(wavname = "blstm")
def get_wav(wavname) :
    f = wave.open(wavname + "/test/test_synthesis/wav/arctic_a0001.wav", "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave
time_blstm, wave_blstm = get_wav(wavname = "blstm")
def get_wav(wavname) :
    f = wave.open(wavname + "/test/test_synthesis/wav/arctic_a0001.wav", "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm")
time_dnn, wave_dnn = get_wav(wavname = "dnn")
time_lstm, wave_lstm = get_wav(wavname = "lstm")
plt.subplot(311) 
plt.plot(time_blstm, wave_blstm)
plt.subplot(312) 
plt.plot(time_dnn, wave_dnn, c="g")
plt.subplot(313)
plt.plot(time_lstm, wave_lstm, c='r')
plt.xlabel("time (seconds)")
plt.show()
import discriminative_classfier
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
LR.train
LR = discriminative_classfier.LogisticRegression()
LR.train(eps = 1e-4)
LR.train()
LR.train
LR.test
print LR.test
print LR.test()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
reload(discriminative_classfier)
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
reload(discriminative_classfier)
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.train()
print KnnClassifier.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 1)
print KnnClassifier.train()
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 1)
print KnnClassifier.train()
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
lambdas = [1:10:1]
lambdas
lambdas = range(1, 11)
lambdas
lambdas = range(1, 11)
lambdas += 5 * range(3, 21)
lambdas = range(1, 11)
lambdas += 5 * range(3, 21)
lambdas
lambdas = range(1, 11)
lambdas += range(15, 100, 5)
lambdas
lambdas = range(1, 11) + range(15, 101, 5)
lambdas
def Logistic_Tester(lambdas, prep = "z") :
    Logistic_Regression = discriminative_classfier.LogisticRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Logistic_Regression.train()
    test_err = Logistic_Regression.test()
    return train_err, test_err
train_errs = []
test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "z")
    train_errs.append(train_err)
    test_errs.append(test_err)
train_errs
test_errs
import matplotlib.pyplot as plt
%matplotlib inline
plt.plot(lambdas, train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, test_errs, label="test error", color="blue", linewidth=2)
plt.plot(lambdas, train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for logistic regression")
def KNN_Tester(lambdas, prep = "z") :
    KNN = discriminative_classfier.KNNClassifier(K= lambdas, preprocessing= prep)
    train_err = KNN.train()
    test_err = KNN.test()
    return train_err, test_err
KNN_z_train_errs = []
KNN_z_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN(lambdas = lam, prep = "z")
    KNN_z_train_errs.append(train_err)
    KNN_z_test_errs.append(test_err)
KNN_z_train_errs = []
KNN_z_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "z")
    KNN_z_train_errs.append(train_err)
    KNN_z_test_errs.append(test_err)
plt.plot(lambdas, KNN_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for K nearest neighbors")
logistic_z_train_errs = []
logistic_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "z")
    logistic_z_train_errs.append(train_err)
    logistic_z_test_errs.append(test_err)
plt.plot(lambdas, logistic_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for logistic regression with z preprocessing")
plt.plot(lambdas, logistic_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with z preprocessing")
logistic_log_train_errs = []
logistic_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "log")
    logistic_log_train_errs.append(train_err)
    logistic_log_test_errs.append(test_err)
plt.plot(lambdas, logistic_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with log preprocessing")
logistic_bin_train_errs = []
logistic_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "binarized")
    logistic_log_train_errs.append(train_err)
    logistic_log_test_errs.append(test_err)
logistic_bin_train_errs = []
logistic_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "binarized")
    logistic_bin_train_errs.append(train_err)
    logistic_bin_test_errs.append(test_err)
plt.plot(lambdas, logistic_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with binarized preprocessing")
KNN_log_train_errs = []
KNN_log_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "log")
    KNN_log_train_errs.append(train_err)
    KNN_log_test_errs.append(test_err)
plt.plot(lambdas, KNN_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for K nearest neighbors with log preprocessing")
KNN_bin_train_errs = []
KNN_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "bin")
    KNN_bin_train_errs.append(train_err)
    KNN_bin_test_errs.append(test_err)
plt.plot(lambdas, KNN_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for K nearest neighbors with binarized preprocessing")
import discriminative_classfier
import matplotlib.pyplot as plt
%matplotlib inline
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 1)
print KnnClassifier.train()
print KnnClassifier.test()
lambdas = range(1, 11) + range(15, 101, 5)
lambdas
def Logistic_Tester(lambdas, prep = "z") :
    Logistic_Regression = discriminative_classfier.LogisticRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Logistic_Regression.train()
    test_err = Logistic_Regression.test()
    return train_err, test_err
logistic_z_train_errs = []
logistic_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "z")
    logistic_z_train_errs.append(train_err)
    logistic_z_test_errs.append(test_err)
plt.plot(lambdas, logistic_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with z preprocessing")
logistic_log_train_errs = []
logistic_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "log")
    logistic_log_train_errs.append(train_err)
    logistic_log_test_errs.append(test_err)
plt.plot(lambdas, logistic_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with log preprocessing")
logistic_bin_train_errs = []
logistic_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "binarized")
    logistic_bin_train_errs.append(train_err)
    logistic_bin_test_errs.append(test_err)
plt.plot(lambdas, logistic_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with binarized preprocessing")
plt.plot(lambdas, train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for logistic regression")
def Linear_Tester(lambdas, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Linear_Regression.train()
    test_err = Linear_Regression.test()
    return train_err, test_err
linear_z_train_errs = []
linear_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "z")
    linear_z_train_errs.append(train_err)
    linear_z_test_errs.append(test_err)
plt.plot(lambdas, linear_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with z preprocessing")
linear_log_train_errs = []
linear_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "log")
    linear_log_train_errs.append(train_err)
    linear_log_test_errs.append(test_err)
plt.plot(lambdas, linear_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with log preprocessing")
linear_bin_train_errs = []
linear_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "binarized")
    linear_bin_train_errs.append(train_err)
    linear_bin_test_errs.append(test_err)
plt.plot(lambdas, linear_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with binarized preprocessing")
def KNN_Tester(lambdas, prep = "z") :
    KNN = discriminative_classfier.KNNClassifier(K= lambdas, preprocessing= prep)
    train_err = KNN.train()
    test_err = KNN.test()
    return train_err, test_err
KNN_z_train_errs = []
KNN_z_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "z")
    KNN_z_train_errs.append(train_err)
    KNN_z_test_errs.append(test_err)
import discriminative_classfier
import matplotlib.pyplot as plt
%matplotlib inline
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 1)
print KnnClassifier.train()
import discriminative_classfier
import matplotlib.pyplot as plt
%matplotlib inline
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
lambdas = range(1, 11) + range(15, 101, 5)
lambdas
def Logistic_Tester(lambdas, prep = "z") :
    Logistic_Regression = discriminative_classfier.LogisticRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Logistic_Regression.train()
    test_err = Logistic_Regression.test()
    return train_err, test_err
logistic_z_train_errs = []
logistic_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "z")
    logistic_z_train_errs.append(train_err)
    logistic_z_test_errs.append(test_err)
plt.plot(lambdas, logistic_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with z preprocessing")
logistic_log_train_errs = []
logistic_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "log")
    logistic_log_train_errs.append(train_err)
    logistic_log_test_errs.append(test_err)
plt.plot(lambdas, logistic_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with log preprocessing")
logistic_bin_train_errs = []
logistic_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "binarized")
    logistic_bin_train_errs.append(train_err)
    logistic_bin_test_errs.append(test_err)
plt.plot(lambdas, logistic_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with binarized preprocessing")
def Linear_Tester(lambdas, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Linear_Regression.train()
    test_err = Linear_Regression.test()
    return train_err, test_err
linear_z_train_errs = []
linear_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "z")
    linear_z_train_errs.append(train_err)
    linear_z_test_errs.append(test_err)
plt.plot(lambdas, linear_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with z preprocessing")
linear_log_train_errs = []
linear_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "log")
    linear_log_train_errs.append(train_err)
    linear_log_test_errs.append(test_err)
plt.plot(lambdas, linear_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with log preprocessing")
linear_bin_train_errs = []
linear_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "binarized")
    linear_bin_train_errs.append(train_err)
    linear_bin_test_errs.append(test_err)
plt.plot(lambdas, linear_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with binarized preprocessing")
def KNN_Tester(lambdas, prep = "z") :
    KNN = discriminative_classfier.KNNClassifier(K= lambdas, preprocessing= prep)
    train_err = KNN.train()
    test_err = KNN.test()
    return train_err, test_err
KNN_z_train_errs = []
KNN_z_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "z")
    KNN_z_train_errs.append(train_err)
    KNN_z_test_errs.append(test_err)
plt.plot(lambdas, KNN_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for K nearest neighbors")
KNN_log_train_errs = []
KNN_log_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "log")
    KNN_log_train_errs.append(train_err)
    KNN_log_test_errs.append(test_err)
plt.plot(lambdas, KNN_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for K nearest neighbors with log preprocessing")
KNN_bin_train_errs = []
KNN_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "bin")
    KNN_bin_train_errs.append(train_err)
    KNN_bin_test_errs.append(test_err)
plt.plot(lambdas, KNN_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for K nearest neighbors with binarized preprocessing")
KNN_z_train_errs
KNN_z_train_errs[0]
KNN_z_train_errs[0]
KNN_log_train_errs[0]
KNN_bin_train_errs[0]
print KNN_z_train_errs[0]
print KNN_log_train_errs[0]
print KNN_bin_train_errs[0]
import discriminative_classfier
import dataloader
import matplotlib.pyplot as plt
%matplotlib inline
X_test, y_test, X_train, y_train = dataloader.load_data(preprocess= 'z')
X_test, y_test, X_train, y_train, feature_size = dataloader.load_data(preprocess= 'z')
for i in range(X_test) :
    for j in range(0, i) :
        if (X_test[i] == X_test[j])
            print X_test[i], X_test[j]
for i in range(X_test) :
    for j in range(0, i) :
        if (X_test[i] == X_test[j]):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (X_test[i] == X_test[j]):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j])):
            print X_test[i], X_test[j]
import discriminative_classfier
import dataloader
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j])):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i, :], X_test[j, :])):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i,], X_test[j,])):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j].all())):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j]).all()):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j]).all() and y_test[i] != y_test[j]):
            print i, y_test[i]
            print X_test[i]
            print j, y_test[j]
            print X_test[j]
X_test, y_test, X_train, y_train, feature_size = dataloader.load_data()
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j]).all() and y_test[i] != y_test[j]):
            print i, y_test[i]
            print X_test[i]
            print j, y_test[j]
            print X_test[j]
print logistic_z_test_errs[0]
print logistic_z_test_errs[9]
print logistic_z_test_errs[-1]
print logistic_z_train_errs[0]
print logistic_z_train_errs[9]
print logistic_z_train_errs[-1]
print linear_z_test_errs[0]
print linear_z_test_errs[9]
print linear_z_test_errs[-1]
print linear_z_train_errs[0]
print linear_z_train_errs[9]
print linear_z_train_errs[-1]
print KNN_z_train_errs[0]
print KNN_z_train_errs[9]
print KNN_z_train_errs[-1]
print KNN_z_test_errs[0]
print KNN_z_test_errs[9]
print KNN_z_test_errs[-1]
def Linear_SGD_Tester(lambdas, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Linear_Regression.sgd_train()
    test_err = Linear_Regression.test()
    return train_err, test_err
def Linear_SGD_Tester(prep = "z", eta=1e-4) :
    Linear_Regression = discriminative_classfier.LinearRegression(eta=eta, preprocessing=prep)
    train_err = Linear_Regression.sgd_train()
    test_err = Linear_Regression.test()
    return train_err, test_err
etas = range(1, 11) * 1.
etas = float(range(1, 11))
etas = [i * 0.1 for i in range(1, 11)]
etas
etas = [10.0 ** (-i) for i in range(1, 11)]
etas
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
print Linear_Regression.next_batch()
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
print Linear_Regression.next_batch()[0]
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
print Linear_Regression.next_batch()[0]
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
print Linear_Regression.next_batch()
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
print x
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for y in x :
    print y
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
print next(x)
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
plt.plot(etas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(etas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_Tester(lambdas = 10, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
def Linear_SGD_Tester(prep = "z", eta=1e-4) :
    Linear_Regression = discriminative_classfier.LinearRegression(eta=eta, preprocessing=prep, max_epoch=500)
    train_err = Linear_Regression.sgd_train()
    test_err = Linear_Regression.test()
    return train_err, test_err
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
etas = [10.0 ** (-i * 0.5) for i in range(1, 11)]
etas
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
etas = [10.0 ** (-i * 0.67) for i in range(1, 11)]
etas
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
etas = [10.0 ** (-i * 0.67) for i in range(1, 11)]
etas
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
print next(x)
print next(x)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for i in range(10):
    print next(x)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
from sklearn import linear_model
clf = linear_model.SGDClassifier()
X_test, y_test, X_train, y_train, feature_size = dataloader.load_data(preprocess='z')
clf.fit(X_test, y_test)
clf.fit(X_train, y_train)
clf.score(X_test, y_test)
clf = linear_model.SGDRegressor()
clf.fit(X_train, y_train)
clf.score(X_test, y_test)
predictions = clf.predict(X_test)
err = 1 - sum((predictions == y_test)) * 1. / len(y_test)
print err
predictions = clf.predict(X_test)
print predictions
clf = linear_model.SGDClassifier()
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
print predictions
err = 1 - sum((predictions == y_test)) * 1. / len(y_test)
print err
true_pos = predictions == y_test and predictions > 0
print true_pos
true_pos = (predictions == y_test)# and predictions > 0
print true_pos
true_pos = (predictions == y_test)# and predictions > 0
print true_pos.sum()
true_pos = 0
for i in range(len(y_test)) :
    if (predictions[i] == y_test[i] and predictions[i] > 0)
        true_pos += 1
print true_pos
true_pos = 0
for i in range(len(y_test)) :
    if (predictions[i] == y_test[i] and predictions[i] > 0):
        true_pos += 1
print true_pos
precision = true_pos / sum(predictions)
precision = 1. * true_pos / sum(predictions)
print precision
recall = 1. * true_pos / sum(y_test)
print recall
reload(discriminative_classfier)
def Linear_SGD_Tester(prep = "z", eta=1e-4) :
    Linear_Regression = discriminative_classfier.LinearRegression(eta=eta, preprocessing=prep, max_epoch=500)
    Linear_Regression.train()
    return Linear_Regression.test()
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall curve")
reload(discriminative_classfier)
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall curve")
import discriminative_classfier
import dataloader
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
true_pos = [1 if x > 0 else -1 for x in predictions] == y_test
print true_pos
true_pos = sum([1 if x > 0 else -1 for x in predictions] == y_test)
print true_pos
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print sgd_train_errs
print sgd_test_errs
import discriminative_classfier
import dataloader
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
true_pos = sum([1 if x > 0 else -1 for x in predictions] == y_test)
print true_pos
etas = [10.0 ** (-i * 0.67) for i in range(1, 11)]
etas
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print sgd_train_errs
print sgd_test_errs
def Linear_Tester(lambdas, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    return Linear_Regression.test()
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
def Linear_Tester(eta, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(eta = eta, preprocessing=prep)
    return Linear_Regression.test()
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
prin recalls
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = 1e-4, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
def Linear_Tester(eta, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(eta = eta, preprocessing=prep)
    Linear_Regression.train()
    return Linear_Regression.test()
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
reload(discriminative_classfier)
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
etas = [10.0 ** (-i * 0.5) for i in range(1, 11)]
etas
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
etas = [10.0 ** (-i * 0.5) for i in range(1, 10)]
etas
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
etas = [10.0 ** (-i) for i in range(1, 10)]
etas
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
clf.fit(X_train, y_train, lerning_rate = 'constant', eta0 = 1e-4)
clf.fit(X_train, y_train, learning_rate = 'constant', eta0 = 1e-4)
clf = linear_model.SGDClassifier(learning_rate = 'constant', eta0 = 1e-4)
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
print predictions
err = 1 - sum((predictions == y_test)) * 1. / len(y_test)
print err
true_pos = sum([1 if x > 0 else -1 for x in predictions] == y_test)
print true_pos
X_test, y_test, X_train, y_train, feature_size = dataloader.load_data(preprocess='z')
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
print predictions
err = 1 - sum((predictions == y_test)) * 1. / len(y_test)
print err
true_pos = sum([1 if x > 0 else -1 for x in predictions] == y_test)
print true_pos
precision = 1. * true_pos / sum(predictions)
print precision
import wave
import pylab as pl
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
def get_wav(wavname) :
    f = wave.open(wavname + "/test/test_synthesis/wav/arctic_a0001.wav", "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
def get_wav(wavname, id) :
    filename = wavename + "/test/test_synthesis/wav/arctic_" + "%03d" %id + ".wav"
    f = wave.open(filename, "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm", id=1)
def get_wav(wavname, id) :
    filename = wavname + "/test/test_synthesis/wav/arctic_" + "%03d" %id + ".wav"
    f = wave.open(filename, "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm", id=1)
def get_wav(wavname, id) :
    filename = wavname + "/test/test_synthesis/wav/arctic_" + "%04d" %id + ".wav"
    f = wave.open(filename, "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm", id=1)
def get_wav(wavname, id) :
    filename = wavname + "/test/test_synthesis/wav/arctic_a" + "%04d" %id + ".wav"
    f = wave.open(filename, "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm", id=1)
from utils.work import predict_work
data = sio.loadmat("./spamData.mat")
feature_size = len(data["Xtrain"][1])
def binarized(d):
    d = [1 if e > 0 else 0 for e in d]
    return np.array(d, dtype=int)
def logtransform(d):
    d = [np.log(e + 0.1) for e in d]
    return d
def znormalization(d):
    mean = np.mean(d)
    std = np.std(d)
    d = [(e - mean) / std for e in d]
    return d
def flat(d):
    return np.array(d, dtype=int).flatten()
Xtrain = data['Xtrain']
ytrain = flat(data['ytrain'])
Xtest = data['Xtest']
ytest = flat(data['ytest'])
print "Loaded " + str(len(ytrain)) + " train samples, " + \
              "and " + str(len(ytest)) + " test samples, " + \
              "feature of X is of length " + str(feature_size) + "."
def binarized_all(mat):
    mat = [binarized(d) for d in mat]
    return mat
print Xtrain[0]
def logtransform_all(mat):
    mat = [logtransform(d) for d in mat]
    return mat
def znormalization_all(mat):
    mat = [znormalization(d) for d in mat]
    return mat
print logtransform_all(Xtrain)
print znormalization_all(Xtrain)
print ytest
positive = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 1]
print len(positive)
negative = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 0]
print len(negative)
xtrain = Xtrain#logtransform_all(Xtrain)
xtest = Xtest#logtransform_all(Xtest)
mu_pos_total = []
var_pos_total = []
mu_neg_total = []
var_neg_total = []
for i in range(feature_size) :
    # y = 1
    positive = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 1]
    mu_pos = np.mean(positive)
    var_pos = np.var(positive) + 0.0001
    # y = 0
    negative = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 0]
    mu_neg = np.mean(negative)
    var_neg = np.var(negative) + 0.0001
    mu_pos_total.append(mu_pos)
    var_pos_total.append(var_pos) 
    mu_neg_total.append(mu_neg) 
    var_neg_total.append(var_neg)
def calculate_likelihood(x, mu, var) :
    return np.exp(-np.square(x - mu) / (2 * var)) / np.sqrt(2 * np.pi * var)
pi_1 = 1. * sum(ytrain) / len(ytrain)
print pi_1
predicts = []
for feature in xtest :
    #positive probabiity
    pos_prob = pi_1 #prior
    for i in range(feature_size) :
        pos_prob *= calculate_likelihood(x = feature[i], mu = mu_pos_total[i], var = var_pos_total[i])
    #negative probabiity
    neg_prob = 1 - pi_1 #prior
    for i in range(feature_size) :
        neg_prob *= calculate_likelihood(x = feature[i], mu = mu_neg_total[i], var = var_neg_total[i])
    predict = 1 if pos_prob > neg_prob else 0
    predicts.append(predict)
print predicts
result = predicts == ytest
print sum(result)
print "Accuracy =", sum(result) * 1. / len(predicts)
import sklearn
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
y_pred = gnb.fit(binarized_all(Xtrain), ytrain).predict(binarized_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
zGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="z")
logGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="log")
biGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="binarized")
zGNB.train()
zaccuracy, zerror = zGNB.test()
logGNB.train()
logaccuracy, logerror = logGNB.test()
biGNB.train()
biaccuracy, bierror = biGNB.test()
print zaccuracy, zerror
print logaccuracy, logerror
print biaccuracy, bierror
biBNB_1 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=1, preprocessing="binarized")
biBNB_1.train()
biBNB_1.test()
%matplotlib inline
import scipy.io as sio
import scipy
import numpy as np
import matplotlib.pyplot as plt
import naive_bayes_classifier
data = sio.loadmat("./spamData.mat")
feature_size = len(data["Xtrain"][1])
def binarized(d):
    d = [1 if e > 0 else 0 for e in d]
    return np.array(d, dtype=int)
def logtransform(d):
    d = [np.log(e + 0.1) for e in d]
    return d
def znormalization(d):
    mean = np.mean(d)
    std = np.std(d)
    d = [(e - mean) / std for e in d]
    return d
def flat(d):
    return np.array(d, dtype=int).flatten()
Xtrain = data['Xtrain']
ytrain = flat(data['ytrain'])
Xtest = data['Xtest']
ytest = flat(data['ytest'])
print "Loaded " + str(len(ytrain)) + " train samples, " + \
              "and " + str(len(ytest)) + " test samples, " + \
              "feature of X is of length " + str(feature_size) + "."
def binarized_all(mat):
    mat = [binarized(d) for d in mat]
    return mat
print Xtrain[0]
def logtransform_all(mat):
    mat = [logtransform(d) for d in mat]
    return mat
def znormalization_all(mat):
    mat = [znormalization(d) for d in mat]
    return mat
print logtransform_all(Xtrain)
print znormalization_all(Xtrain)
print ytest
positive = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 1]
print len(positive)
negative = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 0]
print len(negative)
xtrain = Xtrain#logtransform_all(Xtrain)
xtest = Xtest#logtransform_all(Xtest)
mu_pos_total = []
var_pos_total = []
mu_neg_total = []
var_neg_total = []
for i in range(feature_size) :
    # y = 1
    positive = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 1]
    mu_pos = np.mean(positive)
    var_pos = np.var(positive) + 0.0001
    # y = 0
    negative = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 0]
    mu_neg = np.mean(negative)
    var_neg = np.var(negative) + 0.0001
    mu_pos_total.append(mu_pos)
    var_pos_total.append(var_pos) 
    mu_neg_total.append(mu_neg) 
    var_neg_total.append(var_neg)
def calculate_likelihood(x, mu, var) :
    return np.exp(-np.square(x - mu) / (2 * var)) / np.sqrt(2 * np.pi * var)
pi_1 = 1. * sum(ytrain) / len(ytrain)
print pi_1
predicts = []
for feature in xtest :
    #positive probabiity
    pos_prob = pi_1 #prior
    for i in range(feature_size) :
        pos_prob *= calculate_likelihood(x = feature[i], mu = mu_pos_total[i], var = var_pos_total[i])
    #negative probabiity
    neg_prob = 1 - pi_1 #prior
    for i in range(feature_size) :
        neg_prob *= calculate_likelihood(x = feature[i], mu = mu_neg_total[i], var = var_neg_total[i])
    predict = 1 if pos_prob > neg_prob else 0
    predicts.append(predict)
print predicts
result = predicts == ytest
print sum(result)
print "Accuracy =", sum(result) * 1. / len(predicts)
import sklearn
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
y_pred = gnb.fit(binarized_all(Xtrain), ytrain).predict(binarized_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
zGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="z")
logGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="log")
biGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="binarized")
zGNB.train()
zaccuracy, zerror = zGNB.test()
logGNB.train()
logaccuracy, logerror = logGNB.test()
biGNB.train()
biaccuracy, bierror = biGNB.test()
print zaccuracy, zerror
print logaccuracy, logerror
print biaccuracy, bierror
biBNB_1 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=1, preprocessing="binarized")
biBNB_1.train()
biBNB_1.test()
biBNB_10 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=10, preprocessing="binarized")
biBNB_10.train()
biBNB_10.test()
biBNB_100 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=100, preprocessing="binarized")
biBNB_100.train()
biBNB_100.test()
from sklearn.naive_bayes import BernoulliNB
xtrain = binarized_all(Xtrain)
xtest = binarized_all(Xtest)
clf = BernoulliNB()
y_pred = clf.fit(xtrain, ytrain).predict(xtest)
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
print sum(ytest) * 1. / len(ytest)
from scipy.stats import beta
print beta.pdf(x = 0.5, a = 2, b = 2)
x = [1, 2, 3]
error_test = [0.110026041667,0.110677083333,0.110677083333]
error_train = [0.112561174551, 0.112561174551, 0.111908646003]
n_groups = 3
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.35
opacity = 0.4
rects1 = plt.bar(index, error_train, bar_width,alpha=opacity, color='b',label='train')
rects2 = plt.bar(index + bar_width, error_test, bar_width,alpha=opacity, color='r',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.xticks(index + bar_width, ('1', '10', '100'))
plt.legend()
plt.tight_layout()
plt.show()
plt.plot(x, error_train, color='b',label='train')
plt.plot(x, error_test, color='r',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.xticks(x, ('1', '10', '100'))
plt.legend()
plt.tight_layout()
plt.show()
error_train = []
error_test = []
for i in range(101) :
    biBNB = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=i * 50, preprocessing="binarized")
    biBNB.train()
    accuracy, error = biBNB.test()
    error_test.append(error)
x = [i * 50 for i in range(101)]
print len(x)
print len(error_test)
print error_test
plt.plot(x, error_test, color='b',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.legend()
#plt.ylim(0.110, 0.112)
plt.tight_layout()
plt.show()
naive_bayes_classifier = reload(naive_bayes_classifier)
for i in range(101) :
    biBNB = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=i * 50, preprocessing="binarized")
    biBNB.train()
    accuracy, error = biBNB.test()
    error_train.append(error)
plt.plot(x, error_test, color='b',label='test')
plt.plot(x, error_train, color='r',label='train')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.legend()
#plt.ylim(0.110, 0.112)
plt.tight_layout()
plt.show()
%matplotlib inline
import scipy.io as sio
import scipy
import numpy as np
import matplotlib.pyplot as plt
import naive_bayes_classifier
data = sio.loadmat("./spamData.mat")
feature_size = len(data["Xtrain"][1])
def binarized(d):
    d = [1 if e > 0 else 0 for e in d]
    return np.array(d, dtype=int)
def logtransform(d):
    d = [np.log(e + 0.1) for e in d]
    return d
def znormalization(d):
    mean = np.mean(d)
    std = np.std(d)
    d = [(e - mean) / std for e in d]
    return d
def flat(d):
    return np.array(d, dtype=int).flatten()
Xtrain = data['Xtrain']
ytrain = flat(data['ytrain'])
Xtest = data['Xtest']
ytest = flat(data['ytest'])
print "Loaded " + str(len(ytrain)) + " train samples, " + \
              "and " + str(len(ytest)) + " test samples, " + \
              "feature of X is of length " + str(feature_size) + "."
def binarized_all(mat):
    mat = [binarized(d) for d in mat]
    return mat
print Xtrain[0]
def logtransform_all(mat):
    mat = [logtransform(d) for d in mat]
    return mat
def znormalization_all(mat):
    mat = [znormalization(d) for d in mat]
    return mat
print logtransform_all(Xtrain)
print znormalization_all(Xtrain)
print ytest
positive = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 1]
print len(positive)
negative = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 0]
print len(negative)
xtrain = Xtrain#logtransform_all(Xtrain)
xtest = Xtest#logtransform_all(Xtest)
mu_pos_total = []
var_pos_total = []
mu_neg_total = []
var_neg_total = []
for i in range(feature_size) :
    # y = 1
    positive = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 1]
    mu_pos = np.mean(positive)
    var_pos = np.var(positive) + 0.0001
    # y = 0
    negative = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 0]
    mu_neg = np.mean(negative)
    var_neg = np.var(negative) + 0.0001
    mu_pos_total.append(mu_pos)
    var_pos_total.append(var_pos) 
    mu_neg_total.append(mu_neg) 
    var_neg_total.append(var_neg)
def calculate_likelihood(x, mu, var) :
    return np.exp(-np.square(x - mu) / (2 * var)) / np.sqrt(2 * np.pi * var)
pi_1 = 1. * sum(ytrain) / len(ytrain)
print pi_1
predicts = []
for feature in xtest :
    #positive probabiity
    pos_prob = pi_1 #prior
    for i in range(feature_size) :
        pos_prob *= calculate_likelihood(x = feature[i], mu = mu_pos_total[i], var = var_pos_total[i])
    #negative probabiity
    neg_prob = 1 - pi_1 #prior
    for i in range(feature_size) :
        neg_prob *= calculate_likelihood(x = feature[i], mu = mu_neg_total[i], var = var_neg_total[i])
    predict = 1 if pos_prob > neg_prob else 0
    predicts.append(predict)
print predicts
result = predicts == ytest
print sum(result)
print "Accuracy =", sum(result) * 1. / len(predicts)
import sklearn
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
y_pred = gnb.fit(binarized_all(Xtrain), ytrain).predict(binarized_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
zGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="z")
logGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="log")
biGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="binarized")
zGNB.train()
zaccuracy, zerror = zGNB.test()
logGNB.train()
logaccuracy, logerror = logGNB.test()
biGNB.train()
biaccuracy, bierror = biGNB.test()
print zaccuracy, zerror
print logaccuracy, logerror
print biaccuracy, bierror
biBNB_1 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=1, preprocessing="binarized")
biBNB_1.train()
biBNB_1.test()
biBNB_10 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=10, preprocessing="binarized")
biBNB_10.train()
biBNB_10.test()
biBNB_100 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=100, preprocessing="binarized")
biBNB_100.train()
biBNB_100.test()
from sklearn.naive_bayes import BernoulliNB
xtrain = binarized_all(Xtrain)
xtest = binarized_all(Xtest)
clf = BernoulliNB()
y_pred = clf.fit(xtrain, ytrain).predict(xtest)
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
print sum(ytest) * 1. / len(ytest)
from scipy.stats import beta
print beta.pdf(x = 0.5, a = 2, b = 2)
x = [1, 2, 3]
error_test = [0.110026041667,0.110677083333,0.110677083333]
error_train = [0.112561174551, 0.112561174551, 0.111908646003]
n_groups = 3
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.35
opacity = 0.4
rects1 = plt.bar(index, error_train, bar_width,alpha=opacity, color='b',label='train')
rects2 = plt.bar(index + bar_width, error_test, bar_width,alpha=opacity, color='r',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.xticks(index + bar_width, ('1', '10', '100'))
plt.legend()
plt.tight_layout()
plt.show()
plt.plot(x, error_train, color='b',label='train')
plt.plot(x, error_test, color='r',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.xticks(x, ('1', '10', '100'))
plt.legend()
plt.tight_layout()
plt.show()
error_train = []
error_test = []
for i in range(101) :
    biBNB = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=i, preprocessing="binarized")
    biBNB.train()
    accuracy, error = biBNB.test()
    error_test.append(error)
x = [i for i in range(101)]
print len(x)
print len(error_test)
print error_test
plt.plot(x, error_test, color='b',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.legend()
#plt.ylim(0.110, 0.112)
plt.tight_layout()
plt.show()
naive_bayes_classifier = reload(naive_bayes_classifier)
for i in range(101) :
    biBNB = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=i, preprocessing="binarized")
    biBNB.train()
    accuracy, error = biBNB.test()
    error_train.append(error)
naive_bayes_classifier = reload(naive_bayes_classifier)
error_train = []
for i in range(101) :
    biBNB = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=i, preprocessing="binarized")
    biBNB.train()
    accuracy, error = biBNB.test()
    error_train.append(error)
plt.plot(x, error_test, color='b',label='test')
plt.plot(x, error_train, color='r',label='train')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.legend()
#plt.ylim(0.110, 0.112)
plt.tight_layout()
plt.show()
zGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="z")
logGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="log")
biGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="binarized")
zGNB.train()
zaccuracy, zerror = zGNB.test()
logGNB.train()
logaccuracy, logerror = logGNB.test()
biGNB.train()
biaccuracy, bierror = biGNB.test()
print zaccuracy, zerror
print logaccuracy, logerror
print biaccuracy, bierror
gnb = GaussianNB()
y_pred = gnb.fit(binarized_all(Xtrain), ytrain).predict(binarized_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
error_train = [0.175856443719, 0.163458401305, 0.137683523654]
naive_bayes_classifier = reload(naive_bayes_classifier)
zGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="z")
logGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="log")
biGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="binarized")
zGNB.train()
zaccuracy, zerror = zGNB.test()
logGNB.train()
logaccuracy, logerror = logGNB.test()
biGNB.train()
biaccuracy, bierror = biGNB.test()
print zaccuracy, zerror
print logaccuracy, logerror
print biaccuracy, bierror
error_test = [0.188802083333, 0.180989583333, 0.157552083333]
rects1 = plt.bar(index, error_train, bar_width,alpha=opacity, color='b',label='train')
rects2 = plt.bar(index + bar_width, error_test, bar_width,alpha=opacity, color='r',label='test')
plt.xlabel('Pre Processing')
plt.ylabel('Error Rate')
plt.xticks(index + bar_width, ('z', 'log', 'binarized'))
plt.legend()
plt.tight_layout()
plt.show()
y_pred = gnb.fit(binarized_all(Xtrain), ytrain).predict(znormalization_all(Xtest))
y_pred = gnb.fit(binarized_all(znormalization_all(Xtrain), ytrain).predict(znormalization_all(Xtest))
y_pred = gnb.fit(znormalization_all(Xtrain), ytrain).predict(znormalization_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
y_pred = gnb.fit(logtransform_all(Xtrain), ytrain).predict(logtransform_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
import urllib
qiejq
x = np.array([[1., 2.], [3., 4.]])
out1 = np.linalg.inv(x)
assert np.allclose(np.dot(x, out1), np.eye(2))
print out1
import numpy as np
x = [1,2]
y = [[4, 1], [2, 2]]
print np.dot(x, y)
print np.dot(y, x)
print np.matmul(x, y)
print np.inner(x, y)
print np.inner(y, x)
x = [[1, 0], [0, 1]]
y = [[4, 1], [2, 2], [1, 1]]
print np.dot(y, x)
print np.matmul(y, x)
x = np.array(['a', 'b'], dtype=object)
y = np.array([1, 2])
print np.inner(x, y)
print np.inner(y, x)
print np.outer(x, y)
print np.outer(y, x)
import system
import sys
import os
import os
os.system('touch 1')
import wave
import pylab as pl
import numpy as np
f = wave.open(r"arctic_a0001.wav", "rb")
params = f.getparams()
nchannels, sampwidth, framerate, nframes = params[:4]
str_data = f.readframes(nframes)
f.close()
wave_data = np.fromstring(str_data, dtype=np.short)
wave_data.shape = -1, 2
wave_data = wave_data.T
time = np.arange(0, nframes) * (1.0 / framerate)
wave_data = np.fromstring(str_data, dtype=np.short)
print wave_data.shape
wave_data = wave_data.T
time = np.arange(0, nframes) * (1.0 / framerate)
wave_data = np.fromstring(str_data, dtype=np.short)
print framerate
time = np.arange(0, nframes) * (1.0 / framerate)
pl.subplot(211) 
pl.plot(time, wave_data)
pl.subplot(212) 
pl.plot(time, wave_data, c="g")
pl.xlabel("time (seconds)")
pl.show()
import wave
import pylab as pl
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
plt.subplot(211) 
plt.plot(time, wave_data)
plt.subplot(212) 
plt.plot(time, wave_data, c="g")
plt.xlabel("time (seconds)")
plt.show()
import wave
import pylab as pl
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
f = wave.open(r"blstm/test/test_synthesis/wav/arctic_a0001.wav", "rb")
params = f.getparams()
nchannels, sampwidth, framerate, nframes = params[:4]
str_data = f.readframes(nframes)
f.close()
wave_data = np.fromstring(str_data, dtype=np.short)
print framerate
time = np.arange(0, nframes) * (1.0 / framerate)
plt.subplot(211) 
plt.plot(time, wave_data)
plt.subplot(212) 
plt.plot(time, wave_data, c="g")
plt.xlabel("time (seconds)")
plt.show()
f = wave.open(r"blstm/test/test_synthesis/wav/arctic_a0001.wav", "rb")
params = f.getparams()
nchannels, sampwidth, framerate, nframes = params[:4]
str_data = f.readframes(nframes)
time = np.arange(0, nframes) * (1.0 / framerate)
wave_blstm = np.fromstring(str_data, dtype=np.short)
f.close()
plt.subplot(211) 
plt.plot(time, wave_data)
plt.subplot(212) 
plt.plot(time, wave_data, c="g")
plt.xlabel("time (seconds)")
plt.show()
time_blstm, wave_blstm = get_wav(wavname = "blstm")
def get_wav(self, wavname) :
    f = wave.open(wavname + "/test/test_synthesis/wav/arctic_a0001.wav", "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave
time_blstm, wave_blstm = get_wav(wavname = "blstm")
def get_wav(wavname) :
    f = wave.open(wavname + "/test/test_synthesis/wav/arctic_a0001.wav", "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave
time_blstm, wave_blstm = get_wav(wavname = "blstm")
def get_wav(wavname) :
    f = wave.open(wavname + "/test/test_synthesis/wav/arctic_a0001.wav", "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm")
time_dnn, wave_dnn = get_wav(wavname = "dnn")
time_lstm, wave_lstm = get_wav(wavname = "lstm")
plt.subplot(311) 
plt.plot(time_blstm, wave_blstm)
plt.subplot(312) 
plt.plot(time_dnn, wave_dnn, c="g")
plt.subplot(313)
plt.plot(time_lstm, wave_lstm, c='r')
plt.xlabel("time (seconds)")
plt.show()
import discriminative_classfier
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
LR.train
LR = discriminative_classfier.LogisticRegression()
LR.train(eps = 1e-4)
LR.train()
LR.train
LR.test
print LR.test
print LR.test()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
reload(discriminative_classfier)
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
reload(discriminative_classfier)
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.train()
print KnnClassifier.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 1)
print KnnClassifier.train()
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 1)
print KnnClassifier.train()
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
lambdas = [1:10:1]
lambdas
lambdas = range(1, 11)
lambdas
lambdas = range(1, 11)
lambdas += 5 * range(3, 21)
lambdas = range(1, 11)
lambdas += 5 * range(3, 21)
lambdas
lambdas = range(1, 11)
lambdas += range(15, 100, 5)
lambdas
lambdas = range(1, 11) + range(15, 101, 5)
lambdas
def Logistic_Tester(lambdas, prep = "z") :
    Logistic_Regression = discriminative_classfier.LogisticRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Logistic_Regression.train()
    test_err = Logistic_Regression.test()
    return train_err, test_err
train_errs = []
test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "z")
    train_errs.append(train_err)
    test_errs.append(test_err)
train_errs
test_errs
import matplotlib.pyplot as plt
%matplotlib inline
plt.plot(lambdas, train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, test_errs, label="test error", color="blue", linewidth=2)
plt.plot(lambdas, train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for logistic regression")
def KNN_Tester(lambdas, prep = "z") :
    KNN = discriminative_classfier.KNNClassifier(K= lambdas, preprocessing= prep)
    train_err = KNN.train()
    test_err = KNN.test()
    return train_err, test_err
KNN_z_train_errs = []
KNN_z_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN(lambdas = lam, prep = "z")
    KNN_z_train_errs.append(train_err)
    KNN_z_test_errs.append(test_err)
KNN_z_train_errs = []
KNN_z_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "z")
    KNN_z_train_errs.append(train_err)
    KNN_z_test_errs.append(test_err)
plt.plot(lambdas, KNN_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for K nearest neighbors")
logistic_z_train_errs = []
logistic_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "z")
    logistic_z_train_errs.append(train_err)
    logistic_z_test_errs.append(test_err)
plt.plot(lambdas, logistic_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for logistic regression with z preprocessing")
plt.plot(lambdas, logistic_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with z preprocessing")
logistic_log_train_errs = []
logistic_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "log")
    logistic_log_train_errs.append(train_err)
    logistic_log_test_errs.append(test_err)
plt.plot(lambdas, logistic_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with log preprocessing")
logistic_bin_train_errs = []
logistic_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "binarized")
    logistic_log_train_errs.append(train_err)
    logistic_log_test_errs.append(test_err)
logistic_bin_train_errs = []
logistic_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "binarized")
    logistic_bin_train_errs.append(train_err)
    logistic_bin_test_errs.append(test_err)
plt.plot(lambdas, logistic_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with binarized preprocessing")
KNN_log_train_errs = []
KNN_log_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "log")
    KNN_log_train_errs.append(train_err)
    KNN_log_test_errs.append(test_err)
plt.plot(lambdas, KNN_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for K nearest neighbors with log preprocessing")
KNN_bin_train_errs = []
KNN_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "bin")
    KNN_bin_train_errs.append(train_err)
    KNN_bin_test_errs.append(test_err)
plt.plot(lambdas, KNN_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for K nearest neighbors with binarized preprocessing")
import discriminative_classfier
import matplotlib.pyplot as plt
%matplotlib inline
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 1)
print KnnClassifier.train()
print KnnClassifier.test()
lambdas = range(1, 11) + range(15, 101, 5)
lambdas
def Logistic_Tester(lambdas, prep = "z") :
    Logistic_Regression = discriminative_classfier.LogisticRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Logistic_Regression.train()
    test_err = Logistic_Regression.test()
    return train_err, test_err
logistic_z_train_errs = []
logistic_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "z")
    logistic_z_train_errs.append(train_err)
    logistic_z_test_errs.append(test_err)
plt.plot(lambdas, logistic_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with z preprocessing")
logistic_log_train_errs = []
logistic_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "log")
    logistic_log_train_errs.append(train_err)
    logistic_log_test_errs.append(test_err)
plt.plot(lambdas, logistic_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with log preprocessing")
logistic_bin_train_errs = []
logistic_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "binarized")
    logistic_bin_train_errs.append(train_err)
    logistic_bin_test_errs.append(test_err)
plt.plot(lambdas, logistic_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with binarized preprocessing")
plt.plot(lambdas, train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for logistic regression")
def Linear_Tester(lambdas, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Linear_Regression.train()
    test_err = Linear_Regression.test()
    return train_err, test_err
linear_z_train_errs = []
linear_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "z")
    linear_z_train_errs.append(train_err)
    linear_z_test_errs.append(test_err)
plt.plot(lambdas, linear_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with z preprocessing")
linear_log_train_errs = []
linear_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "log")
    linear_log_train_errs.append(train_err)
    linear_log_test_errs.append(test_err)
plt.plot(lambdas, linear_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with log preprocessing")
linear_bin_train_errs = []
linear_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "binarized")
    linear_bin_train_errs.append(train_err)
    linear_bin_test_errs.append(test_err)
plt.plot(lambdas, linear_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with binarized preprocessing")
def KNN_Tester(lambdas, prep = "z") :
    KNN = discriminative_classfier.KNNClassifier(K= lambdas, preprocessing= prep)
    train_err = KNN.train()
    test_err = KNN.test()
    return train_err, test_err
KNN_z_train_errs = []
KNN_z_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "z")
    KNN_z_train_errs.append(train_err)
    KNN_z_test_errs.append(test_err)
import discriminative_classfier
import matplotlib.pyplot as plt
%matplotlib inline
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 1)
print KnnClassifier.train()
import discriminative_classfier
import matplotlib.pyplot as plt
%matplotlib inline
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
lambdas = range(1, 11) + range(15, 101, 5)
lambdas
def Logistic_Tester(lambdas, prep = "z") :
    Logistic_Regression = discriminative_classfier.LogisticRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Logistic_Regression.train()
    test_err = Logistic_Regression.test()
    return train_err, test_err
logistic_z_train_errs = []
logistic_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "z")
    logistic_z_train_errs.append(train_err)
    logistic_z_test_errs.append(test_err)
plt.plot(lambdas, logistic_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with z preprocessing")
logistic_log_train_errs = []
logistic_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "log")
    logistic_log_train_errs.append(train_err)
    logistic_log_test_errs.append(test_err)
plt.plot(lambdas, logistic_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with log preprocessing")
logistic_bin_train_errs = []
logistic_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "binarized")
    logistic_bin_train_errs.append(train_err)
    logistic_bin_test_errs.append(test_err)
plt.plot(lambdas, logistic_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with binarized preprocessing")
def Linear_Tester(lambdas, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Linear_Regression.train()
    test_err = Linear_Regression.test()
    return train_err, test_err
linear_z_train_errs = []
linear_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "z")
    linear_z_train_errs.append(train_err)
    linear_z_test_errs.append(test_err)
plt.plot(lambdas, linear_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with z preprocessing")
linear_log_train_errs = []
linear_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "log")
    linear_log_train_errs.append(train_err)
    linear_log_test_errs.append(test_err)
plt.plot(lambdas, linear_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with log preprocessing")
linear_bin_train_errs = []
linear_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "binarized")
    linear_bin_train_errs.append(train_err)
    linear_bin_test_errs.append(test_err)
plt.plot(lambdas, linear_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with binarized preprocessing")
def KNN_Tester(lambdas, prep = "z") :
    KNN = discriminative_classfier.KNNClassifier(K= lambdas, preprocessing= prep)
    train_err = KNN.train()
    test_err = KNN.test()
    return train_err, test_err
KNN_z_train_errs = []
KNN_z_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "z")
    KNN_z_train_errs.append(train_err)
    KNN_z_test_errs.append(test_err)
plt.plot(lambdas, KNN_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for K nearest neighbors")
KNN_log_train_errs = []
KNN_log_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "log")
    KNN_log_train_errs.append(train_err)
    KNN_log_test_errs.append(test_err)
plt.plot(lambdas, KNN_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for K nearest neighbors with log preprocessing")
KNN_bin_train_errs = []
KNN_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "bin")
    KNN_bin_train_errs.append(train_err)
    KNN_bin_test_errs.append(test_err)
plt.plot(lambdas, KNN_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for K nearest neighbors with binarized preprocessing")
KNN_z_train_errs
KNN_z_train_errs[0]
KNN_z_train_errs[0]
KNN_log_train_errs[0]
KNN_bin_train_errs[0]
print KNN_z_train_errs[0]
print KNN_log_train_errs[0]
print KNN_bin_train_errs[0]
import discriminative_classfier
import dataloader
import matplotlib.pyplot as plt
%matplotlib inline
X_test, y_test, X_train, y_train = dataloader.load_data(preprocess= 'z')
X_test, y_test, X_train, y_train, feature_size = dataloader.load_data(preprocess= 'z')
for i in range(X_test) :
    for j in range(0, i) :
        if (X_test[i] == X_test[j])
            print X_test[i], X_test[j]
for i in range(X_test) :
    for j in range(0, i) :
        if (X_test[i] == X_test[j]):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (X_test[i] == X_test[j]):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j])):
            print X_test[i], X_test[j]
import discriminative_classfier
import dataloader
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j])):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i, :], X_test[j, :])):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i,], X_test[j,])):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j].all())):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j]).all()):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j]).all() and y_test[i] != y_test[j]):
            print i, y_test[i]
            print X_test[i]
            print j, y_test[j]
            print X_test[j]
X_test, y_test, X_train, y_train, feature_size = dataloader.load_data()
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j]).all() and y_test[i] != y_test[j]):
            print i, y_test[i]
            print X_test[i]
            print j, y_test[j]
            print X_test[j]
print logistic_z_test_errs[0]
print logistic_z_test_errs[9]
print logistic_z_test_errs[-1]
print logistic_z_train_errs[0]
print logistic_z_train_errs[9]
print logistic_z_train_errs[-1]
print linear_z_test_errs[0]
print linear_z_test_errs[9]
print linear_z_test_errs[-1]
print linear_z_train_errs[0]
print linear_z_train_errs[9]
print linear_z_train_errs[-1]
print KNN_z_train_errs[0]
print KNN_z_train_errs[9]
print KNN_z_train_errs[-1]
print KNN_z_test_errs[0]
print KNN_z_test_errs[9]
print KNN_z_test_errs[-1]
def Linear_SGD_Tester(lambdas, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Linear_Regression.sgd_train()
    test_err = Linear_Regression.test()
    return train_err, test_err
def Linear_SGD_Tester(prep = "z", eta=1e-4) :
    Linear_Regression = discriminative_classfier.LinearRegression(eta=eta, preprocessing=prep)
    train_err = Linear_Regression.sgd_train()
    test_err = Linear_Regression.test()
    return train_err, test_err
etas = range(1, 11) * 1.
etas = float(range(1, 11))
etas = [i * 0.1 for i in range(1, 11)]
etas
etas = [10.0 ** (-i) for i in range(1, 11)]
etas
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
print Linear_Regression.next_batch()
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
print Linear_Regression.next_batch()[0]
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
print Linear_Regression.next_batch()[0]
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
print Linear_Regression.next_batch()
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
print x
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for y in x :
    print y
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
print next(x)
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
plt.plot(etas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(etas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_Tester(lambdas = 10, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
def Linear_SGD_Tester(prep = "z", eta=1e-4) :
    Linear_Regression = discriminative_classfier.LinearRegression(eta=eta, preprocessing=prep, max_epoch=500)
    train_err = Linear_Regression.sgd_train()
    test_err = Linear_Regression.test()
    return train_err, test_err
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
etas = [10.0 ** (-i * 0.5) for i in range(1, 11)]
etas
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
etas = [10.0 ** (-i * 0.67) for i in range(1, 11)]
etas
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
etas = [10.0 ** (-i * 0.67) for i in range(1, 11)]
etas
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
print next(x)
print next(x)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for i in range(10):
    print next(x)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
from sklearn import linear_model
clf = linear_model.SGDClassifier()
X_test, y_test, X_train, y_train, feature_size = dataloader.load_data(preprocess='z')
clf.fit(X_test, y_test)
clf.fit(X_train, y_train)
clf.score(X_test, y_test)
clf = linear_model.SGDRegressor()
clf.fit(X_train, y_train)
clf.score(X_test, y_test)
predictions = clf.predict(X_test)
err = 1 - sum((predictions == y_test)) * 1. / len(y_test)
print err
predictions = clf.predict(X_test)
print predictions
clf = linear_model.SGDClassifier()
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
print predictions
err = 1 - sum((predictions == y_test)) * 1. / len(y_test)
print err
true_pos = predictions == y_test and predictions > 0
print true_pos
true_pos = (predictions == y_test)# and predictions > 0
print true_pos
true_pos = (predictions == y_test)# and predictions > 0
print true_pos.sum()
true_pos = 0
for i in range(len(y_test)) :
    if (predictions[i] == y_test[i] and predictions[i] > 0)
        true_pos += 1
print true_pos
true_pos = 0
for i in range(len(y_test)) :
    if (predictions[i] == y_test[i] and predictions[i] > 0):
        true_pos += 1
print true_pos
precision = true_pos / sum(predictions)
precision = 1. * true_pos / sum(predictions)
print precision
recall = 1. * true_pos / sum(y_test)
print recall
reload(discriminative_classfier)
def Linear_SGD_Tester(prep = "z", eta=1e-4) :
    Linear_Regression = discriminative_classfier.LinearRegression(eta=eta, preprocessing=prep, max_epoch=500)
    Linear_Regression.train()
    return Linear_Regression.test()
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall curve")
reload(discriminative_classfier)
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall curve")
import discriminative_classfier
import dataloader
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
true_pos = [1 if x > 0 else -1 for x in predictions] == y_test
print true_pos
true_pos = sum([1 if x > 0 else -1 for x in predictions] == y_test)
print true_pos
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print sgd_train_errs
print sgd_test_errs
import discriminative_classfier
import dataloader
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
true_pos = sum([1 if x > 0 else -1 for x in predictions] == y_test)
print true_pos
etas = [10.0 ** (-i * 0.67) for i in range(1, 11)]
etas
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print sgd_train_errs
print sgd_test_errs
def Linear_Tester(lambdas, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    return Linear_Regression.test()
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
def Linear_Tester(eta, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(eta = eta, preprocessing=prep)
    return Linear_Regression.test()
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
prin recalls
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = 1e-4, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
def Linear_Tester(eta, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(eta = eta, preprocessing=prep)
    Linear_Regression.train()
    return Linear_Regression.test()
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
reload(discriminative_classfier)
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
etas = [10.0 ** (-i * 0.5) for i in range(1, 11)]
etas
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
etas = [10.0 ** (-i * 0.5) for i in range(1, 10)]
etas
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
etas = [10.0 ** (-i) for i in range(1, 10)]
etas
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
clf.fit(X_train, y_train, lerning_rate = 'constant', eta0 = 1e-4)
clf.fit(X_train, y_train, learning_rate = 'constant', eta0 = 1e-4)
clf = linear_model.SGDClassifier(learning_rate = 'constant', eta0 = 1e-4)
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
print predictions
err = 1 - sum((predictions == y_test)) * 1. / len(y_test)
print err
true_pos = sum([1 if x > 0 else -1 for x in predictions] == y_test)
print true_pos
X_test, y_test, X_train, y_train, feature_size = dataloader.load_data(preprocess='z')
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
print predictions
err = 1 - sum((predictions == y_test)) * 1. / len(y_test)
print err
true_pos = sum([1 if x > 0 else -1 for x in predictions] == y_test)
print true_pos
precision = 1. * true_pos / sum(predictions)
print precision
import wave
import pylab as pl
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
def get_wav(wavname) :
    f = wave.open(wavname + "/test/test_synthesis/wav/arctic_a0001.wav", "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
def get_wav(wavname, id) :
    filename = wavename + "/test/test_synthesis/wav/arctic_" + "%03d" %id + ".wav"
    f = wave.open(filename, "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm", id=1)
def get_wav(wavname, id) :
    filename = wavname + "/test/test_synthesis/wav/arctic_" + "%03d" %id + ".wav"
    f = wave.open(filename, "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm", id=1)
def get_wav(wavname, id) :
    filename = wavname + "/test/test_synthesis/wav/arctic_" + "%04d" %id + ".wav"
    f = wave.open(filename, "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm", id=1)
def get_wav(wavname, id) :
    filename = wavname + "/test/test_synthesis/wav/arctic_a" + "%04d" %id + ".wav"
    f = wave.open(filename, "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm", id=1)
from utils.work import predict_work
%matplotlib inline
import scipy.io as sio
import scipy
import numpy as np
import matplotlib.pyplot as plt
import naive_bayes_classifier
data = sio.loadmat("./spamData.mat")
feature_size = len(data["Xtrain"][1])
def binarized(d):
    d = [1 if e > 0 else 0 for e in d]
    return np.array(d, dtype=int)
def logtransform(d):
    d = [np.log(e + 0.1) for e in d]
    return d
def znormalization(d):
    mean = np.mean(d)
    std = np.std(d)
    d = [(e - mean) / std for e in d]
    return d
def flat(d):
    return np.array(d, dtype=int).flatten()
Xtrain = data['Xtrain']
ytrain = flat(data['ytrain'])
Xtest = data['Xtest']
ytest = flat(data['ytest'])
print "Loaded " + str(len(ytrain)) + " train samples, " + \
              "and " + str(len(ytest)) + " test samples, " + \
              "feature of X is of length " + str(feature_size) + "."
def binarized_all(mat):
    mat = [binarized(d) for d in mat]
    return mat
print Xtrain[0]
def logtransform_all(mat):
    mat = [logtransform(d) for d in mat]
    return mat
def znormalization_all(mat):
    mat = [znormalization(d) for d in mat]
    return mat
print logtransform_all(Xtrain)
print znormalization_all(Xtrain)
print ytest
positive = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 1]
print len(positive)
negative = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 0]
print len(negative)
xtrain = Xtrain#logtransform_all(Xtrain)
xtest = Xtest#logtransform_all(Xtest)
mu_pos_total = []
var_pos_total = []
mu_neg_total = []
var_neg_total = []
for i in range(feature_size) :
    # y = 1
    positive = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 1]
    mu_pos = np.mean(positive)
    var_pos = np.var(positive) + 0.0001
    # y = 0
    negative = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 0]
    mu_neg = np.mean(negative)
    var_neg = np.var(negative) + 0.0001
    mu_pos_total.append(mu_pos)
    var_pos_total.append(var_pos) 
    mu_neg_total.append(mu_neg) 
    var_neg_total.append(var_neg)
def calculate_likelihood(x, mu, var) :
    return np.exp(-np.square(x - mu) / (2 * var)) / np.sqrt(2 * np.pi * var)
pi_1 = 1. * sum(ytrain) / len(ytrain)
print pi_1
predicts = []
for feature in xtest :
    #positive probabiity
    pos_prob = pi_1 #prior
    for i in range(feature_size) :
        pos_prob *= calculate_likelihood(x = feature[i], mu = mu_pos_total[i], var = var_pos_total[i])
    #negative probabiity
    neg_prob = 1 - pi_1 #prior
    for i in range(feature_size) :
        neg_prob *= calculate_likelihood(x = feature[i], mu = mu_neg_total[i], var = var_neg_total[i])
    predict = 1 if pos_prob > neg_prob else 0
    predicts.append(predict)
print predicts
result = predicts == ytest
print sum(result)
print "Accuracy =", sum(result) * 1. / len(predicts)
import sklearn
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
y_pred = gnb.fit(binarized_all(Xtrain), ytrain).predict(binarized_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
zGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="z")
logGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="log")
biGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="binarized")
zGNB.train()
zaccuracy, zerror = zGNB.test()
logGNB.train()
logaccuracy, logerror = logGNB.test()
biGNB.train()
biaccuracy, bierror = biGNB.test()
print zaccuracy, zerror
print logaccuracy, logerror
print biaccuracy, bierror
biBNB_1 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=1, preprocessing="binarized")
biBNB_1.train()
biBNB_1.test()
%matplotlib inline
import scipy.io as sio
import scipy
import numpy as np
import matplotlib.pyplot as plt
import naive_bayes_classifier
data = sio.loadmat("./spamData.mat")
feature_size = len(data["Xtrain"][1])
def binarized(d):
    d = [1 if e > 0 else 0 for e in d]
    return np.array(d, dtype=int)
def logtransform(d):
    d = [np.log(e + 0.1) for e in d]
    return d
def znormalization(d):
    mean = np.mean(d)
    std = np.std(d)
    d = [(e - mean) / std for e in d]
    return d
def flat(d):
    return np.array(d, dtype=int).flatten()
Xtrain = data['Xtrain']
ytrain = flat(data['ytrain'])
Xtest = data['Xtest']
ytest = flat(data['ytest'])
print "Loaded " + str(len(ytrain)) + " train samples, " + \
              "and " + str(len(ytest)) + " test samples, " + \
              "feature of X is of length " + str(feature_size) + "."
def binarized_all(mat):
    mat = [binarized(d) for d in mat]
    return mat
print Xtrain[0]
def logtransform_all(mat):
    mat = [logtransform(d) for d in mat]
    return mat
def znormalization_all(mat):
    mat = [znormalization(d) for d in mat]
    return mat
print logtransform_all(Xtrain)
print znormalization_all(Xtrain)
print ytest
positive = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 1]
print len(positive)
negative = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 0]
print len(negative)
xtrain = Xtrain#logtransform_all(Xtrain)
xtest = Xtest#logtransform_all(Xtest)
mu_pos_total = []
var_pos_total = []
mu_neg_total = []
var_neg_total = []
for i in range(feature_size) :
    # y = 1
    positive = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 1]
    mu_pos = np.mean(positive)
    var_pos = np.var(positive) + 0.0001
    # y = 0
    negative = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 0]
    mu_neg = np.mean(negative)
    var_neg = np.var(negative) + 0.0001
    mu_pos_total.append(mu_pos)
    var_pos_total.append(var_pos) 
    mu_neg_total.append(mu_neg) 
    var_neg_total.append(var_neg)
def calculate_likelihood(x, mu, var) :
    return np.exp(-np.square(x - mu) / (2 * var)) / np.sqrt(2 * np.pi * var)
pi_1 = 1. * sum(ytrain) / len(ytrain)
print pi_1
predicts = []
for feature in xtest :
    #positive probabiity
    pos_prob = pi_1 #prior
    for i in range(feature_size) :
        pos_prob *= calculate_likelihood(x = feature[i], mu = mu_pos_total[i], var = var_pos_total[i])
    #negative probabiity
    neg_prob = 1 - pi_1 #prior
    for i in range(feature_size) :
        neg_prob *= calculate_likelihood(x = feature[i], mu = mu_neg_total[i], var = var_neg_total[i])
    predict = 1 if pos_prob > neg_prob else 0
    predicts.append(predict)
print predicts
result = predicts == ytest
print sum(result)
print "Accuracy =", sum(result) * 1. / len(predicts)
import sklearn
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
y_pred = gnb.fit(binarized_all(Xtrain), ytrain).predict(binarized_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
zGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="z")
logGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="log")
biGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="binarized")
zGNB.train()
zaccuracy, zerror = zGNB.test()
logGNB.train()
logaccuracy, logerror = logGNB.test()
biGNB.train()
biaccuracy, bierror = biGNB.test()
print zaccuracy, zerror
print logaccuracy, logerror
print biaccuracy, bierror
biBNB_1 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=1, preprocessing="binarized")
biBNB_1.train()
biBNB_1.test()
biBNB_10 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=10, preprocessing="binarized")
biBNB_10.train()
biBNB_10.test()
biBNB_100 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=100, preprocessing="binarized")
biBNB_100.train()
biBNB_100.test()
from sklearn.naive_bayes import BernoulliNB
xtrain = binarized_all(Xtrain)
xtest = binarized_all(Xtest)
clf = BernoulliNB()
y_pred = clf.fit(xtrain, ytrain).predict(xtest)
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
print sum(ytest) * 1. / len(ytest)
from scipy.stats import beta
print beta.pdf(x = 0.5, a = 2, b = 2)
x = [1, 2, 3]
error_test = [0.110026041667,0.110677083333,0.110677083333]
error_train = [0.112561174551, 0.112561174551, 0.111908646003]
n_groups = 3
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.35
opacity = 0.4
rects1 = plt.bar(index, error_train, bar_width,alpha=opacity, color='b',label='train')
rects2 = plt.bar(index + bar_width, error_test, bar_width,alpha=opacity, color='r',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.xticks(index + bar_width, ('1', '10', '100'))
plt.legend()
plt.tight_layout()
plt.show()
plt.plot(x, error_train, color='b',label='train')
plt.plot(x, error_test, color='r',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.xticks(x, ('1', '10', '100'))
plt.legend()
plt.tight_layout()
plt.show()
error_train = []
error_test = []
for i in range(101) :
    biBNB = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=i * 50, preprocessing="binarized")
    biBNB.train()
    accuracy, error = biBNB.test()
    error_test.append(error)
x = [i * 50 for i in range(101)]
print len(x)
print len(error_test)
print error_test
plt.plot(x, error_test, color='b',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.legend()
#plt.ylim(0.110, 0.112)
plt.tight_layout()
plt.show()
naive_bayes_classifier = reload(naive_bayes_classifier)
for i in range(101) :
    biBNB = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=i * 50, preprocessing="binarized")
    biBNB.train()
    accuracy, error = biBNB.test()
    error_train.append(error)
plt.plot(x, error_test, color='b',label='test')
plt.plot(x, error_train, color='r',label='train')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.legend()
#plt.ylim(0.110, 0.112)
plt.tight_layout()
plt.show()
%matplotlib inline
import scipy.io as sio
import scipy
import numpy as np
import matplotlib.pyplot as plt
import naive_bayes_classifier
data = sio.loadmat("./spamData.mat")
feature_size = len(data["Xtrain"][1])
def binarized(d):
    d = [1 if e > 0 else 0 for e in d]
    return np.array(d, dtype=int)
def logtransform(d):
    d = [np.log(e + 0.1) for e in d]
    return d
def znormalization(d):
    mean = np.mean(d)
    std = np.std(d)
    d = [(e - mean) / std for e in d]
    return d
def flat(d):
    return np.array(d, dtype=int).flatten()
Xtrain = data['Xtrain']
ytrain = flat(data['ytrain'])
Xtest = data['Xtest']
ytest = flat(data['ytest'])
print "Loaded " + str(len(ytrain)) + " train samples, " + \
              "and " + str(len(ytest)) + " test samples, " + \
              "feature of X is of length " + str(feature_size) + "."
def binarized_all(mat):
    mat = [binarized(d) for d in mat]
    return mat
print Xtrain[0]
def logtransform_all(mat):
    mat = [logtransform(d) for d in mat]
    return mat
def znormalization_all(mat):
    mat = [znormalization(d) for d in mat]
    return mat
print logtransform_all(Xtrain)
print znormalization_all(Xtrain)
print ytest
positive = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 1]
print len(positive)
negative = [feature[0] for (feature, label) in zip(Xtrain, ytrain) if label == 0]
print len(negative)
xtrain = Xtrain#logtransform_all(Xtrain)
xtest = Xtest#logtransform_all(Xtest)
mu_pos_total = []
var_pos_total = []
mu_neg_total = []
var_neg_total = []
for i in range(feature_size) :
    # y = 1
    positive = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 1]
    mu_pos = np.mean(positive)
    var_pos = np.var(positive) + 0.0001
    # y = 0
    negative = [feature[i] for (feature, label) in zip(xtrain, ytrain) if label == 0]
    mu_neg = np.mean(negative)
    var_neg = np.var(negative) + 0.0001
    mu_pos_total.append(mu_pos)
    var_pos_total.append(var_pos) 
    mu_neg_total.append(mu_neg) 
    var_neg_total.append(var_neg)
def calculate_likelihood(x, mu, var) :
    return np.exp(-np.square(x - mu) / (2 * var)) / np.sqrt(2 * np.pi * var)
pi_1 = 1. * sum(ytrain) / len(ytrain)
print pi_1
predicts = []
for feature in xtest :
    #positive probabiity
    pos_prob = pi_1 #prior
    for i in range(feature_size) :
        pos_prob *= calculate_likelihood(x = feature[i], mu = mu_pos_total[i], var = var_pos_total[i])
    #negative probabiity
    neg_prob = 1 - pi_1 #prior
    for i in range(feature_size) :
        neg_prob *= calculate_likelihood(x = feature[i], mu = mu_neg_total[i], var = var_neg_total[i])
    predict = 1 if pos_prob > neg_prob else 0
    predicts.append(predict)
print predicts
result = predicts == ytest
print sum(result)
print "Accuracy =", sum(result) * 1. / len(predicts)
import sklearn
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
y_pred = gnb.fit(binarized_all(Xtrain), ytrain).predict(binarized_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
zGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="z")
logGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="log")
biGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="binarized")
zGNB.train()
zaccuracy, zerror = zGNB.test()
logGNB.train()
logaccuracy, logerror = logGNB.test()
biGNB.train()
biaccuracy, bierror = biGNB.test()
print zaccuracy, zerror
print logaccuracy, logerror
print biaccuracy, bierror
biBNB_1 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=1, preprocessing="binarized")
biBNB_1.train()
biBNB_1.test()
biBNB_10 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=10, preprocessing="binarized")
biBNB_10.train()
biBNB_10.test()
biBNB_100 = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=100, preprocessing="binarized")
biBNB_100.train()
biBNB_100.test()
from sklearn.naive_bayes import BernoulliNB
xtrain = binarized_all(Xtrain)
xtest = binarized_all(Xtest)
clf = BernoulliNB()
y_pred = clf.fit(xtrain, ytrain).predict(xtest)
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
print sum(ytest) * 1. / len(ytest)
from scipy.stats import beta
print beta.pdf(x = 0.5, a = 2, b = 2)
x = [1, 2, 3]
error_test = [0.110026041667,0.110677083333,0.110677083333]
error_train = [0.112561174551, 0.112561174551, 0.111908646003]
n_groups = 3
fig, ax = plt.subplots()
index = np.arange(n_groups)
bar_width = 0.35
opacity = 0.4
rects1 = plt.bar(index, error_train, bar_width,alpha=opacity, color='b',label='train')
rects2 = plt.bar(index + bar_width, error_test, bar_width,alpha=opacity, color='r',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.xticks(index + bar_width, ('1', '10', '100'))
plt.legend()
plt.tight_layout()
plt.show()
plt.plot(x, error_train, color='b',label='train')
plt.plot(x, error_test, color='r',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.xticks(x, ('1', '10', '100'))
plt.legend()
plt.tight_layout()
plt.show()
error_train = []
error_test = []
for i in range(101) :
    biBNB = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=i, preprocessing="binarized")
    biBNB.train()
    accuracy, error = biBNB.test()
    error_test.append(error)
x = [i for i in range(101)]
print len(x)
print len(error_test)
print error_test
plt.plot(x, error_test, color='b',label='test')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.legend()
#plt.ylim(0.110, 0.112)
plt.tight_layout()
plt.show()
naive_bayes_classifier = reload(naive_bayes_classifier)
for i in range(101) :
    biBNB = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=i, preprocessing="binarized")
    biBNB.train()
    accuracy, error = biBNB.test()
    error_train.append(error)
naive_bayes_classifier = reload(naive_bayes_classifier)
error_train = []
for i in range(101) :
    biBNB = naive_bayes_classifier.BetaNaiveBayesClassifier(alpha=i, preprocessing="binarized")
    biBNB.train()
    accuracy, error = biBNB.test()
    error_train.append(error)
plt.plot(x, error_test, color='b',label='test')
plt.plot(x, error_train, color='r',label='train')
plt.xlabel('Alpha')
plt.ylabel('Error Rate')
plt.legend()
#plt.ylim(0.110, 0.112)
plt.tight_layout()
plt.show()
zGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="z")
logGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="log")
biGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="binarized")
zGNB.train()
zaccuracy, zerror = zGNB.test()
logGNB.train()
logaccuracy, logerror = logGNB.test()
biGNB.train()
biaccuracy, bierror = biGNB.test()
print zaccuracy, zerror
print logaccuracy, logerror
print biaccuracy, bierror
gnb = GaussianNB()
y_pred = gnb.fit(binarized_all(Xtrain), ytrain).predict(binarized_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
error_train = [0.175856443719, 0.163458401305, 0.137683523654]
naive_bayes_classifier = reload(naive_bayes_classifier)
zGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="z")
logGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="log")
biGNB = naive_bayes_classifier.GaussianNaiveBayesClassifier(preprocessing="binarized")
zGNB.train()
zaccuracy, zerror = zGNB.test()
logGNB.train()
logaccuracy, logerror = logGNB.test()
biGNB.train()
biaccuracy, bierror = biGNB.test()
print zaccuracy, zerror
print logaccuracy, logerror
print biaccuracy, bierror
error_test = [0.188802083333, 0.180989583333, 0.157552083333]
rects1 = plt.bar(index, error_train, bar_width,alpha=opacity, color='b',label='train')
rects2 = plt.bar(index + bar_width, error_test, bar_width,alpha=opacity, color='r',label='test')
plt.xlabel('Pre Processing')
plt.ylabel('Error Rate')
plt.xticks(index + bar_width, ('z', 'log', 'binarized'))
plt.legend()
plt.tight_layout()
plt.show()
y_pred = gnb.fit(binarized_all(Xtrain), ytrain).predict(znormalization_all(Xtest))
y_pred = gnb.fit(binarized_all(znormalization_all(Xtrain), ytrain).predict(znormalization_all(Xtest))
y_pred = gnb.fit(znormalization_all(Xtrain), ytrain).predict(znormalization_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
y_pred = gnb.fit(logtransform_all(Xtrain), ytrain).predict(logtransform_all(Xtest))
print("Number of mislabeled points out of a total %d points : %d" 
      % (len(ytest),(ytest != y_pred).sum()))
print ("Accuracy =", (ytest == y_pred).sum() * 1. / len(ytest))
import urllib
qiejq
x = np.array([[1., 2.], [3., 4.]])
out1 = np.linalg.inv(x)
assert np.allclose(np.dot(x, out1), np.eye(2))
print out1
import numpy as np
x = [1,2]
y = [[4, 1], [2, 2]]
print np.dot(x, y)
print np.dot(y, x)
print np.matmul(x, y)
print np.inner(x, y)
print np.inner(y, x)
x = [[1, 0], [0, 1]]
y = [[4, 1], [2, 2], [1, 1]]
print np.dot(y, x)
print np.matmul(y, x)
x = np.array(['a', 'b'], dtype=object)
y = np.array([1, 2])
print np.inner(x, y)
print np.inner(y, x)
print np.outer(x, y)
print np.outer(y, x)
import system
import sys
import os
import os
os.system('touch 1')
import wave
import pylab as pl
import numpy as np
f = wave.open(r"arctic_a0001.wav", "rb")
params = f.getparams()
nchannels, sampwidth, framerate, nframes = params[:4]
str_data = f.readframes(nframes)
f.close()
wave_data = np.fromstring(str_data, dtype=np.short)
wave_data.shape = -1, 2
wave_data = wave_data.T
time = np.arange(0, nframes) * (1.0 / framerate)
wave_data = np.fromstring(str_data, dtype=np.short)
print wave_data.shape
wave_data = wave_data.T
time = np.arange(0, nframes) * (1.0 / framerate)
wave_data = np.fromstring(str_data, dtype=np.short)
print framerate
time = np.arange(0, nframes) * (1.0 / framerate)
pl.subplot(211) 
pl.plot(time, wave_data)
pl.subplot(212) 
pl.plot(time, wave_data, c="g")
pl.xlabel("time (seconds)")
pl.show()
import wave
import pylab as pl
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
plt.subplot(211) 
plt.plot(time, wave_data)
plt.subplot(212) 
plt.plot(time, wave_data, c="g")
plt.xlabel("time (seconds)")
plt.show()
import wave
import pylab as pl
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
f = wave.open(r"blstm/test/test_synthesis/wav/arctic_a0001.wav", "rb")
params = f.getparams()
nchannels, sampwidth, framerate, nframes = params[:4]
str_data = f.readframes(nframes)
f.close()
wave_data = np.fromstring(str_data, dtype=np.short)
print framerate
time = np.arange(0, nframes) * (1.0 / framerate)
plt.subplot(211) 
plt.plot(time, wave_data)
plt.subplot(212) 
plt.plot(time, wave_data, c="g")
plt.xlabel("time (seconds)")
plt.show()
f = wave.open(r"blstm/test/test_synthesis/wav/arctic_a0001.wav", "rb")
params = f.getparams()
nchannels, sampwidth, framerate, nframes = params[:4]
str_data = f.readframes(nframes)
time = np.arange(0, nframes) * (1.0 / framerate)
wave_blstm = np.fromstring(str_data, dtype=np.short)
f.close()
plt.subplot(211) 
plt.plot(time, wave_data)
plt.subplot(212) 
plt.plot(time, wave_data, c="g")
plt.xlabel("time (seconds)")
plt.show()
time_blstm, wave_blstm = get_wav(wavname = "blstm")
def get_wav(self, wavname) :
    f = wave.open(wavname + "/test/test_synthesis/wav/arctic_a0001.wav", "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave
time_blstm, wave_blstm = get_wav(wavname = "blstm")
def get_wav(wavname) :
    f = wave.open(wavname + "/test/test_synthesis/wav/arctic_a0001.wav", "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave
time_blstm, wave_blstm = get_wav(wavname = "blstm")
def get_wav(wavname) :
    f = wave.open(wavname + "/test/test_synthesis/wav/arctic_a0001.wav", "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm")
time_dnn, wave_dnn = get_wav(wavname = "dnn")
time_lstm, wave_lstm = get_wav(wavname = "lstm")
plt.subplot(311) 
plt.plot(time_blstm, wave_blstm)
plt.subplot(312) 
plt.plot(time_dnn, wave_dnn, c="g")
plt.subplot(313)
plt.plot(time_lstm, wave_lstm, c='r')
plt.xlabel("time (seconds)")
plt.show()
import discriminative_classfier
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
LR.train
LR = discriminative_classfier.LogisticRegression()
LR.train(eps = 1e-4)
LR.train()
LR.train
LR.test
print LR.test
print LR.test()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression()
LR.train()
print LR.test()
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
reload(discriminative_classfier)
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
reload(discriminative_classfier)
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z")
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 11)
print KnnClassifier.train()
print KnnClassifier.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 1)
print KnnClassifier.train()
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 1)
print KnnClassifier.train()
print KnnClassifier.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
import discriminative_classfier
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
lambdas = [1:10:1]
lambdas
lambdas = range(1, 11)
lambdas
lambdas = range(1, 11)
lambdas += 5 * range(3, 21)
lambdas = range(1, 11)
lambdas += 5 * range(3, 21)
lambdas
lambdas = range(1, 11)
lambdas += range(15, 100, 5)
lambdas
lambdas = range(1, 11) + range(15, 101, 5)
lambdas
def Logistic_Tester(lambdas, prep = "z") :
    Logistic_Regression = discriminative_classfier.LogisticRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Logistic_Regression.train()
    test_err = Logistic_Regression.test()
    return train_err, test_err
train_errs = []
test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "z")
    train_errs.append(train_err)
    test_errs.append(test_err)
train_errs
test_errs
import matplotlib.pyplot as plt
%matplotlib inline
plt.plot(lambdas, train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, test_errs, label="test error", color="blue", linewidth=2)
plt.plot(lambdas, train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for logistic regression")
def KNN_Tester(lambdas, prep = "z") :
    KNN = discriminative_classfier.KNNClassifier(K= lambdas, preprocessing= prep)
    train_err = KNN.train()
    test_err = KNN.test()
    return train_err, test_err
KNN_z_train_errs = []
KNN_z_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN(lambdas = lam, prep = "z")
    KNN_z_train_errs.append(train_err)
    KNN_z_test_errs.append(test_err)
KNN_z_train_errs = []
KNN_z_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "z")
    KNN_z_train_errs.append(train_err)
    KNN_z_test_errs.append(test_err)
plt.plot(lambdas, KNN_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for K nearest neighbors")
logistic_z_train_errs = []
logistic_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "z")
    logistic_z_train_errs.append(train_err)
    logistic_z_test_errs.append(test_err)
plt.plot(lambdas, logistic_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for logistic regression with z preprocessing")
plt.plot(lambdas, logistic_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with z preprocessing")
logistic_log_train_errs = []
logistic_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "log")
    logistic_log_train_errs.append(train_err)
    logistic_log_test_errs.append(test_err)
plt.plot(lambdas, logistic_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with log preprocessing")
logistic_bin_train_errs = []
logistic_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "binarized")
    logistic_log_train_errs.append(train_err)
    logistic_log_test_errs.append(test_err)
logistic_bin_train_errs = []
logistic_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "binarized")
    logistic_bin_train_errs.append(train_err)
    logistic_bin_test_errs.append(test_err)
plt.plot(lambdas, logistic_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with binarized preprocessing")
KNN_log_train_errs = []
KNN_log_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "log")
    KNN_log_train_errs.append(train_err)
    KNN_log_test_errs.append(test_err)
plt.plot(lambdas, KNN_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for K nearest neighbors with log preprocessing")
KNN_bin_train_errs = []
KNN_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "bin")
    KNN_bin_train_errs.append(train_err)
    KNN_bin_test_errs.append(test_err)
plt.plot(lambdas, KNN_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for K nearest neighbors with binarized preprocessing")
import discriminative_classfier
import matplotlib.pyplot as plt
%matplotlib inline
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 1)
print KnnClassifier.train()
print KnnClassifier.test()
lambdas = range(1, 11) + range(15, 101, 5)
lambdas
def Logistic_Tester(lambdas, prep = "z") :
    Logistic_Regression = discriminative_classfier.LogisticRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Logistic_Regression.train()
    test_err = Logistic_Regression.test()
    return train_err, test_err
logistic_z_train_errs = []
logistic_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "z")
    logistic_z_train_errs.append(train_err)
    logistic_z_test_errs.append(test_err)
plt.plot(lambdas, logistic_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with z preprocessing")
logistic_log_train_errs = []
logistic_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "log")
    logistic_log_train_errs.append(train_err)
    logistic_log_test_errs.append(test_err)
plt.plot(lambdas, logistic_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with log preprocessing")
logistic_bin_train_errs = []
logistic_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "binarized")
    logistic_bin_train_errs.append(train_err)
    logistic_bin_test_errs.append(test_err)
plt.plot(lambdas, logistic_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with binarized preprocessing")
plt.plot(lambdas, train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for logistic regression")
def Linear_Tester(lambdas, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Linear_Regression.train()
    test_err = Linear_Regression.test()
    return train_err, test_err
linear_z_train_errs = []
linear_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "z")
    linear_z_train_errs.append(train_err)
    linear_z_test_errs.append(test_err)
plt.plot(lambdas, linear_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with z preprocessing")
linear_log_train_errs = []
linear_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "log")
    linear_log_train_errs.append(train_err)
    linear_log_test_errs.append(test_err)
plt.plot(lambdas, linear_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with log preprocessing")
linear_bin_train_errs = []
linear_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "binarized")
    linear_bin_train_errs.append(train_err)
    linear_bin_test_errs.append(test_err)
plt.plot(lambdas, linear_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with binarized preprocessing")
def KNN_Tester(lambdas, prep = "z") :
    KNN = discriminative_classfier.KNNClassifier(K= lambdas, preprocessing= prep)
    train_err = KNN.train()
    test_err = KNN.test()
    return train_err, test_err
KNN_z_train_errs = []
KNN_z_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "z")
    KNN_z_train_errs.append(train_err)
    KNN_z_test_errs.append(test_err)
import discriminative_classfier
import matplotlib.pyplot as plt
%matplotlib inline
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
KnnClassifier = discriminative_classfier.KNNClassifier(preprocessing="z", K = 1)
print KnnClassifier.train()
import discriminative_classfier
import matplotlib.pyplot as plt
%matplotlib inline
reload(discriminative_classfier)
LR = discriminative_classfier.LogisticRegression(l2_on=True)
LR.train()
print LR.test()
LinearRegression = discriminative_classfier.LinearRegression()
LinearRegression.train()
print LinearRegression.test()
lambdas = range(1, 11) + range(15, 101, 5)
lambdas
def Logistic_Tester(lambdas, prep = "z") :
    Logistic_Regression = discriminative_classfier.LogisticRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Logistic_Regression.train()
    test_err = Logistic_Regression.test()
    return train_err, test_err
logistic_z_train_errs = []
logistic_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "z")
    logistic_z_train_errs.append(train_err)
    logistic_z_test_errs.append(test_err)
plt.plot(lambdas, logistic_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with z preprocessing")
logistic_log_train_errs = []
logistic_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "log")
    logistic_log_train_errs.append(train_err)
    logistic_log_test_errs.append(test_err)
plt.plot(lambdas, logistic_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with log preprocessing")
logistic_bin_train_errs = []
logistic_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Logistic_Tester(lambdas = lam, prep = "binarized")
    logistic_bin_train_errs.append(train_err)
    logistic_bin_test_errs.append(test_err)
plt.plot(lambdas, logistic_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, logistic_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for logistic regression with binarized preprocessing")
def Linear_Tester(lambdas, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Linear_Regression.train()
    test_err = Linear_Regression.test()
    return train_err, test_err
linear_z_train_errs = []
linear_z_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "z")
    linear_z_train_errs.append(train_err)
    linear_z_test_errs.append(test_err)
plt.plot(lambdas, linear_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with z preprocessing")
linear_log_train_errs = []
linear_log_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "log")
    linear_log_train_errs.append(train_err)
    linear_log_test_errs.append(test_err)
plt.plot(lambdas, linear_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with log preprocessing")
linear_bin_train_errs = []
linear_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = Linear_Tester(lambdas = lam, prep = "binarized")
    linear_bin_train_errs.append(train_err)
    linear_bin_test_errs.append(test_err)
plt.plot(lambdas, linear_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, linear_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for linear regression with binarized preprocessing")
def KNN_Tester(lambdas, prep = "z") :
    KNN = discriminative_classfier.KNNClassifier(K= lambdas, preprocessing= prep)
    train_err = KNN.train()
    test_err = KNN.test()
    return train_err, test_err
KNN_z_train_errs = []
KNN_z_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "z")
    KNN_z_train_errs.append(train_err)
    KNN_z_test_errs.append(test_err)
plt.plot(lambdas, KNN_z_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_z_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("train and test error for K nearest neighbors")
KNN_log_train_errs = []
KNN_log_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "log")
    KNN_log_train_errs.append(train_err)
    KNN_log_test_errs.append(test_err)
plt.plot(lambdas, KNN_log_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_log_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for K nearest neighbors with log preprocessing")
KNN_bin_train_errs = []
KNN_bin_test_errs = []
for lam in lambdas :
    train_err, test_err = KNN_Tester(lambdas = lam, prep = "bin")
    KNN_bin_train_errs.append(train_err)
    KNN_bin_test_errs.append(test_err)
plt.plot(lambdas, KNN_bin_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, KNN_bin_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for K nearest neighbors with binarized preprocessing")
KNN_z_train_errs
KNN_z_train_errs[0]
KNN_z_train_errs[0]
KNN_log_train_errs[0]
KNN_bin_train_errs[0]
print KNN_z_train_errs[0]
print KNN_log_train_errs[0]
print KNN_bin_train_errs[0]
import discriminative_classfier
import dataloader
import matplotlib.pyplot as plt
%matplotlib inline
X_test, y_test, X_train, y_train = dataloader.load_data(preprocess= 'z')
X_test, y_test, X_train, y_train, feature_size = dataloader.load_data(preprocess= 'z')
for i in range(X_test) :
    for j in range(0, i) :
        if (X_test[i] == X_test[j])
            print X_test[i], X_test[j]
for i in range(X_test) :
    for j in range(0, i) :
        if (X_test[i] == X_test[j]):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (X_test[i] == X_test[j]):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j])):
            print X_test[i], X_test[j]
import discriminative_classfier
import dataloader
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j])):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i, :], X_test[j, :])):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i,], X_test[j,])):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j].all())):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j]).all()):
            print X_test[i], X_test[j]
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j]).all() and y_test[i] != y_test[j]):
            print i, y_test[i]
            print X_test[i]
            print j, y_test[j]
            print X_test[j]
X_test, y_test, X_train, y_train, feature_size = dataloader.load_data()
for i in range(len(X_test)) :
    for j in range(0, i) :
        if (np.equal(X_test[i], X_test[j]).all() and y_test[i] != y_test[j]):
            print i, y_test[i]
            print X_test[i]
            print j, y_test[j]
            print X_test[j]
print logistic_z_test_errs[0]
print logistic_z_test_errs[9]
print logistic_z_test_errs[-1]
print logistic_z_train_errs[0]
print logistic_z_train_errs[9]
print logistic_z_train_errs[-1]
print linear_z_test_errs[0]
print linear_z_test_errs[9]
print linear_z_test_errs[-1]
print linear_z_train_errs[0]
print linear_z_train_errs[9]
print linear_z_train_errs[-1]
print KNN_z_train_errs[0]
print KNN_z_train_errs[9]
print KNN_z_train_errs[-1]
print KNN_z_test_errs[0]
print KNN_z_test_errs[9]
print KNN_z_test_errs[-1]
def Linear_SGD_Tester(lambdas, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    train_err = Linear_Regression.sgd_train()
    test_err = Linear_Regression.test()
    return train_err, test_err
def Linear_SGD_Tester(prep = "z", eta=1e-4) :
    Linear_Regression = discriminative_classfier.LinearRegression(eta=eta, preprocessing=prep)
    train_err = Linear_Regression.sgd_train()
    test_err = Linear_Regression.test()
    return train_err, test_err
etas = range(1, 11) * 1.
etas = float(range(1, 11))
etas = [i * 0.1 for i in range(1, 11)]
etas
etas = [10.0 ** (-i) for i in range(1, 11)]
etas
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
print Linear_Regression.next_batch()
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
print Linear_Regression.next_batch()[0]
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
print Linear_Regression.next_batch()[0]
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
print Linear_Regression.next_batch()
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
print x
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for y in x :
    print y
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
print next(x)
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_bin_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
plt.plot(lambdas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(lambdas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
plt.plot(etas, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(etas, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_Tester(lambdas = 10, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
def Linear_SGD_Tester(prep = "z", eta=1e-4) :
    Linear_Regression = discriminative_classfier.LinearRegression(eta=eta, preprocessing=prep, max_epoch=500)
    train_err = Linear_Regression.sgd_train()
    test_err = Linear_Regression.test()
    return train_err, test_err
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
etas = [10.0 ** (-i * 0.5) for i in range(1, 11)]
etas
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
etas = [10.0 ** (-i * 0.67) for i in range(1, 11)]
etas
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
etas = [10.0 ** (-i * 0.67) for i in range(1, 11)]
etas
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
print next(x)
print next(x)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch()
for i in range(10):
    print next(x)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
reload(discriminative_classfier)
Linear_Regression = discriminative_classfier.LinearRegression(preprocessing='z')
x = Linear_Regression.next_batch_index()
for i in range(10):
    print next(x)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
reload(discriminative_classfier)
sgd_train_errs = []
sgd_test_errs = []
for eta in etas :
    train_err, test_err = Linear_SGD_Tester(eta = eta, prep = "z")
    sgd_train_errs.append(train_err)
    sgd_test_errs.append(test_err)
index = range(1, 11)
plt.plot(index, sgd_train_errs, label="train error", color="red", linewidth=2)
plt.plot(index, sgd_test_errs, label="test error", color="blue", linewidth=2)
plt.legend()
plt.title("errors for SGD Linear Regression with z preprocessing")
print sgd_train_errs
print sgd_test_errs
from sklearn import linear_model
clf = linear_model.SGDClassifier()
X_test, y_test, X_train, y_train, feature_size = dataloader.load_data(preprocess='z')
clf.fit(X_test, y_test)
clf.fit(X_train, y_train)
clf.score(X_test, y_test)
clf = linear_model.SGDRegressor()
clf.fit(X_train, y_train)
clf.score(X_test, y_test)
predictions = clf.predict(X_test)
err = 1 - sum((predictions == y_test)) * 1. / len(y_test)
print err
predictions = clf.predict(X_test)
print predictions
clf = linear_model.SGDClassifier()
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
print predictions
err = 1 - sum((predictions == y_test)) * 1. / len(y_test)
print err
true_pos = predictions == y_test and predictions > 0
print true_pos
true_pos = (predictions == y_test)# and predictions > 0
print true_pos
true_pos = (predictions == y_test)# and predictions > 0
print true_pos.sum()
true_pos = 0
for i in range(len(y_test)) :
    if (predictions[i] == y_test[i] and predictions[i] > 0)
        true_pos += 1
print true_pos
true_pos = 0
for i in range(len(y_test)) :
    if (predictions[i] == y_test[i] and predictions[i] > 0):
        true_pos += 1
print true_pos
precision = true_pos / sum(predictions)
precision = 1. * true_pos / sum(predictions)
print precision
recall = 1. * true_pos / sum(y_test)
print recall
reload(discriminative_classfier)
def Linear_SGD_Tester(prep = "z", eta=1e-4) :
    Linear_Regression = discriminative_classfier.LinearRegression(eta=eta, preprocessing=prep, max_epoch=500)
    Linear_Regression.train()
    return Linear_Regression.test()
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall curve")
reload(discriminative_classfier)
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall curve")
import discriminative_classfier
import dataloader
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
true_pos = [1 if x > 0 else -1 for x in predictions] == y_test
print true_pos
true_pos = sum([1 if x > 0 else -1 for x in predictions] == y_test)
print true_pos
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print sgd_train_errs
print sgd_test_errs
import discriminative_classfier
import dataloader
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
true_pos = sum([1 if x > 0 else -1 for x in predictions] == y_test)
print true_pos
etas = [10.0 ** (-i * 0.67) for i in range(1, 11)]
etas
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print sgd_train_errs
print sgd_test_errs
def Linear_Tester(lambdas, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(l2norm=lambdas, preprocessing=prep, l2_on=True)
    return Linear_Regression.test()
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
def Linear_Tester(eta, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(eta = eta, preprocessing=prep)
    return Linear_Regression.test()
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
prin recalls
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = 1e-4, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_SGD_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
def Linear_Tester(eta, prep = "z") :
    Linear_Regression = discriminative_classfier.LinearRegression(eta = eta, preprocessing=prep)
    Linear_Regression.train()
    return Linear_Regression.test()
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
reload(discriminative_classfier)
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
etas = [10.0 ** (-i * 0.5) for i in range(1, 11)]
etas
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
etas = [10.0 ** (-i * 0.5) for i in range(1, 10)]
etas
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
etas = [10.0 ** (-i) for i in range(1, 10)]
etas
precisions = []
recalls = []
for eta in etas :
    test_err, precision, recall = Linear_Tester(eta = eta, prep = "z")
    precisions.append(precision)
    recalls.append(recall)
index = range(1, 11)
plt.plot(recalls, precisions, color="red", linewidth=2)
plt.title("precision-recall")
print precisions
print recalls
clf.fit(X_train, y_train, lerning_rate = 'constant', eta0 = 1e-4)
clf.fit(X_train, y_train, learning_rate = 'constant', eta0 = 1e-4)
clf = linear_model.SGDClassifier(learning_rate = 'constant', eta0 = 1e-4)
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
print predictions
err = 1 - sum((predictions == y_test)) * 1. / len(y_test)
print err
true_pos = sum([1 if x > 0 else -1 for x in predictions] == y_test)
print true_pos
X_test, y_test, X_train, y_train, feature_size = dataloader.load_data(preprocess='z')
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
print predictions
err = 1 - sum((predictions == y_test)) * 1. / len(y_test)
print err
true_pos = sum([1 if x > 0 else -1 for x in predictions] == y_test)
print true_pos
precision = 1. * true_pos / sum(predictions)
print precision
import wave
import pylab as pl
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
def get_wav(wavname) :
    f = wave.open(wavname + "/test/test_synthesis/wav/arctic_a0001.wav", "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
def get_wav(wavname, id) :
    filename = wavename + "/test/test_synthesis/wav/arctic_" + "%03d" %id + ".wav"
    f = wave.open(filename, "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm", id=1)
def get_wav(wavname, id) :
    filename = wavname + "/test/test_synthesis/wav/arctic_" + "%03d" %id + ".wav"
    f = wave.open(filename, "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm", id=1)
def get_wav(wavname, id) :
    filename = wavname + "/test/test_synthesis/wav/arctic_" + "%04d" %id + ".wav"
    f = wave.open(filename, "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm", id=1)
def get_wav(wavname, id) :
    filename = wavname + "/test/test_synthesis/wav/arctic_a" + "%04d" %id + ".wav"
    f = wave.open(filename, "rb")
    params = f.getparams()
    nchannels, sampwidth, framerate, nframes = params[:4]
    str_data = f.readframes(nframes)
    time = np.arange(0, nframes) * (1.0 / framerate)
    wave_data = np.fromstring(str_data, dtype=np.short)
    f.close()
    return time, wave_data
time_blstm, wave_blstm = get_wav(wavname = "blstm", id=1)
from utils.work import predict_work
y
from utils.work import predict_work
predict_work
predict_work()
y
from utils.work import predict_work
predict_work()
import os
os.ls()
os.path
os.path()
os.getcwd
os.getcwd()
predict_work
predict_work()
os.getcwd()
os.path('/utils/data/data_english.csv')
import sys
sys.path('/utils/data/data_english.csv')
ls
predict_work()
y
from utils.work import predict_work
predict_work()
y
from utils.work import predict_work
predict_work()
filename = '~/stock_demo/Rem/utils/data/data_english.csv'
~/stock_demo/Rem/utils/data/data_english.csv
with open(filename, 'rt') as f:
    reader = csv.reader(f)
filename = '/home/lab/stock_demo/Rem/utils/data/data_english.csv'
with open(filename, 'rt') as f:
    reader = csv.reader(f)
y
from utils.work import predict_work
predict_work()
y
from utils.work import predict_work
predict_work()
y
from utils.work import predict_work
tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
tmp
type(tmp)
predict_work(tmp)
y
from utils.work import predict_work
tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
predict_work(tmp)
y
from utils.work import predict_work
tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
predict_work(tmp)
y
tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
from utils.work import predict_work
predict_work(tmp)
y
from utils.work import predict_work
tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
predict_work(tmp)
tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
y
from utils.work import predict_work
tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
predict_work(tmp)
y
from utils.work import predict_work
tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
predict_work(tmp)
y
from utils.work import predict_module
y
from utils.work import predict_module
tmp = '汽车 计算机 汽车 汽车 汽车 汽车 计算机'.split(' ')
predict_module(tmp)
tmp
index_to_word
tmp
tmp_ = [t.decode('utf-8') for t in tmp]
tmp_
predict_module(tmp_)
y
from utils.work import predict_stock
tmp = tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
tmp
predict_stock(tmp)
y
from utils.work import predict_stock
tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
predict_stock(tmp)
y
tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
from utils.work import predict_stock
y
tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
from utils.work import predict_stock
predict_stock(tmp)
tmp = [u'\u673a\u68b0\u8bbe\u5907', u'\u91c7\u6398', u'\u516c\u7528\u4e8b\u4e1a', u'\u91c7\u6398', u'\u5efa\u7b51\u88c5\u9970', u'\u5316\u5de5', u'\u5316\u5de5', u'\u7eba\u7ec7\u670d\u88c5', u'\u533b\u836f\u751f\u7269', u'\u7eba\u7ec7\u670d\u88c5', u'\u7eba\u7ec7\u670d\u88c5', u'\u5efa\u7b51\u88c5\u9970', u'\u673a\u68b0\u8bbe\u5907', u'\u519c\u6797\u7267\u6e14', u'\u5316\u5de5', u'\u673a\u68b0\u8bbe\u5907']
tmp
from utils import predict_module
from utils.work import predict_module
predict_module(tmp)
y
from utils import *
from utils.work import *
tmp = [u'\u673a\u68b0\u8bbe\u5907', u'\u91c7\u6398', u'\u516c\u7528\u4e8b\u4e1a', u'\u91c7\u6398', u'\u5efa\u7b51\u88c5\u9970', u'\u5316\u5de5', u'\u5316\u5de5', u'\u7eba\u7ec7\u670d\u88c5', u'\u533b\u836f\u751f\u7269', u'\u7eba\u7ec7\u670d\u88c5', u'\u7eba\u7ec7\u670d\u88c5', u'\u5efa\u7b51\u88c5\u9970', u'\u673a\u68b0\u8bbe\u5907', u'\u519c\u6797\u7267\u6e14', u'\u5316\u5de5', u'\u673a\u68b0\u8bbe\u5907']
predict_module(tmp)
from utils.work import *
tmp = [u'\u673a\u68b0\u8bbe\u5907', u'\u91c7\u6398', u'\u516c\u7528\u4e8b\u4e1a', u'\u91c7\u6398', u'\u5efa\u7b51\u88c5\u9970', u'\u5316\u5de5', u'\u5316\u5de5', u'\u7eba\u7ec7\u670d\u88c5', u'\u533b\u836f\u751f\u7269', u'\u7eba\u7ec7\u670d\u88c5', u'\u7eba\u7ec7\u670d\u88c5', u'\u5efa\u7b51\u88c5\u9970', u'\u673a\u68b0\u8bbe\u5907', u'\u519c\u6797\u7267\u6e14', u'\u5316\u5de5', u'\u673a\u68b0\u8bbe\u5907']
predict_module(tmp)
tmp
for t in tmp:
    print t
from utils.work import *
predict_module(tmp)
tmp
from utils.work import *
predict_module(tmp)
from utils.work import *
predict_module(tmp)
y
from utils.work import *
predict_module(tmp)
tmp = [u'\u673a\u68b0\u8bbe\u5907', u'\u91c7\u6398', u'\u516c\u7528\u4e8b\u4e1a', u'\u91c7\u6398', u'\u5efa\u7b51\u88c5\u9970', u'\u5316\u5de5', u'\u5316\u5de5', u'\u7eba\u7ec7\u670d\u88c5', u'\u533b\u836f\u751f\u7269', u'\u7eba\u7ec7\u670d\u88c5', u'\u7eba\u7ec7\u670d\u88c5', u'\u5efa\u7b51\u88c5\u9970', u'\u673a\u68b0\u8bbe\u5907', u'\u519c\u6797\u7267\u6e14', u'\u5316\u5de5', u'\u673a\u68b0\u8bbe\u5907']
print tmp
tmp
for t in tmp:
    print t
predict_module(tmp)
from utils.work import *
predict_module(tmp)
from utils.work import *
predict_module(tmp)
from utils.work import *
predict_module(tmp)
y
from utils.work import *
predict_module(tmp)
tmp = [u'\u673a\u68b0\u8bbe\u5907', u'\u91c7\u6398', u'\u516c\u7528\u4e8b\u4e1a', u'\u91c7\u6398', u'\u5efa\u7b51\u88c5\u9970', u'\u5316\u5de5', u'\u5316\u5de5', u'\u7eba\u7ec7\u670d\u88c5', u'\u533b\u836f\u751f\u7269', u'\u7eba\u7ec7\u670d\u88c5', u'\u7eba\u7ec7\u670d\u88c5', u'\u5efa\u7b51\u88c5\u9970', u'\u673a\u68b0\u8bbe\u5907', u'\u519c\u6797\u7267\u6e14', u'\u5316\u5de5', u'\u673a\u68b0\u8bbe\u5907']
predict_module(tmp)
y
tmp = [u'\u673a\u68b0\u8bbe\u5907', u'\u91c7\u6398', u'\u516c\u7528\u4e8b\u4e1a', u'\u91c7\u6398', u'\u5efa\u7b51\u88c5\u9970', u'\u5316\u5de5', u'\u5316\u5de5', u'\u7eba\u7ec7\u670d\u88c5', u'\u533b\u836f\u751f\u7269', u'\u7eba\u7ec7\u670d\u88c5', u'\u7eba\u7ec7\u670d\u88c5', u'\u5efa\u7b51\u88c5\u9970', u'\u673a\u68b0\u8bbe\u5907', u'\u519c\u6797\u7267\u6e14', u'\u5316\u5de5', u'\u673a\u68b0\u8bbe\u5907']
from utils.work import *
predict_module(tmp)
y
from utils.work import *
tmp = [u'\u673a\u68b0\u8bbe\u5907', u'\u91c7\u6398', u'\u516c\u7528\u4e8b\u4e1a', u'\u91c7\u6398', u'\u5efa\u7b51\u88c5\u9970', u'\u5316\u5de5', u'\u5316\u5de5', u'\u7eba\u7ec7\u670d\u88c5', u'\u533b\u836f\u751f\u7269', u'\u7eba\u7ec7\u670d\u88c5', u'\u7eba\u7ec7\u670d\u88c5', u'\u5efa\u7b51\u88c5\u9970', u'\u673a\u68b0\u8bbe\u5907', u'\u519c\u6797\u7267\u6e14', u'\u5316\u5de5', u'\u673a\u68b0\u8bbe\u5907']
predict_module(tmp)
y
from utils.work import *
y
from utils.work import *
tmp = [u'\u673a\u68b0\u8bbe\u5907', u'\u91c7\u6398', u'\u516c\u7528\u4e8b\u4e1a', u'\u91c7\u6398', u'\u5efa\u7b51\u88c5\u9970', u'\u5316\u5de5', u'\u5316\u5de5', u'\u7eba\u7ec7\u670d\u88c5', u'\u533b\u836f\u751f\u7269', u'\u7eba\u7ec7\u670d\u88c5', u'\u7eba\u7ec7\u670d\u88c5', u'\u5efa\u7b51\u88c5\u9970', u'\u673a\u68b0\u8bbe\u5907', u'\u519c\u6797\u7267\u6e14', u'\u5316\u5de5', u'\u673a\u68b0\u8bbe\u5907']
from utils.work import *
predict_module(tmp)
y
from utils.work import *
tmp = [u'\u673a\u68b0\u8bbe\u5907', u'\u91c7\u6398', u'\u516c\u7528\u4e8b\u4e1a', u'\u91c7\u6398', u'\u5efa\u7b51\u88c5\u9970', u'\u5316\u5de5', u'\u5316\u5de5', u'\u7eba\u7ec7\u670d\u88c5', u'\u533b\u836f\u751f\u7269', u'\u7eba\u7ec7\u670d\u88c5', u'\u7eba\u7ec7\u670d\u88c5', u'\u5efa\u7b51\u88c5\u9970', u'\u673a\u68b0\u8bbe\u5907', u'\u519c\u6797\u7267\u6e14', u'\u5316\u5de5', u'\u673a\u68b0\u8bbe\u5907']
predict_module(tmp)
y
from utils.work import *
tmp = 'sz000718'
predict_stock(tmp)
tmp = tmp.split(' ')
tmp
predict_stock(tmp)
y
tmp = 'sz000718'.split(' ')
from utils.work import *
predict_stock(tmp)
y
from utils.work import *
tmp = 'sz000718'.split(' ')
predict_stock(tmp)
y
tmp = 'sz000718'.split(' ')
from utils.work import *
predict_stock(tmp)
y
from utils.work import *
tmp = 'sz000718'.split(' ')
from utils.work import *
predict_stock(tmp)
y
from utils.work import *
tmp = 'sz000718'.split(' ')
predict_stock(tmp)
y
from utils.work import *
tmp = 'sz000718'.split(' ')
predict_stock(tmp)
y
tmp = 'sz000718'.split(' ')
from utils.work import *
predict_stock(tmp)
y
from utils.work import *
tmp = 'sz000718'.split(' ')
predict_stock(tmp)
y
tmp = 'sz000718'.split(' ')
from utils.work import *
predict_stock(tmp)
y
from utils.work import *
predict_stock(tmp)
tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
predict_stock(tmp)
y
tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
from utils.work import *
predict_stock(tmp)
from utils.work import *
tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
predict_stock(tmp)
y
tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
from utils.work import *
predict_stock(tmp)
y
tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
from utils.work import *
predict_stock(tmp)
y
from utils.work import *
tmp = 'sh601002 sh601808 sh601991 sh601898 sh600284 sz000731 sz000731 sz002029 sz002433 sz002029 sz002029 sh601117 sz002342 sh600108 sz000422 sz000157'.split(' ')
predict_stock(tmp)
y
from utils.work import *
y
from utils.work import *
y
